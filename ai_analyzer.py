"""
AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º –µ–¥—ã
"""
import openai
import json
import base64
from io import BytesIO
from PIL import Image
import config
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
openai.api_key = config.OPENAI_API_KEY

class CalorieAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–ª–æ—Ä–∏–π –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö –µ–¥—ã"""
    
    def __init__(self):
        self.client = openai.OpenAI(api_key=config.OPENAI_API_KEY)
    
    def encode_image(self, image_bytes):
        """–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64"""
        return base64.b64encode(image_bytes).decode('utf-8')
    
    def resize_image(self, image_bytes, max_size=1024):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        try:
            image = Image.open(BytesIO(image_bytes))
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
            width, height = image.size
            
            # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, –∏–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
            if max(width, height) > max_size:
                if width > height:
                    new_width = max_size
                    new_height = int((height * max_size) / width)
                else:
                    new_height = max_size
                    new_width = int((width * max_size) / height)
                
                image = image.resize((new_width, new_height), Image.Resampling.LANCZOS)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –±–∞–π—Ç—ã
            output = BytesIO()
            image.save(output, format='JPEG', quality=85)
            return output.getvalue()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return image_bytes
    
    async def analyze_food_image(self, image_bytes):
        """
        –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ–¥—ã –∏ –ø–æ–¥—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π
        
        Args:
            image_bytes: –ë–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å –∫–∞–ª–æ—Ä–∏—è–º–∏ –∏ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–º–∏ –≤–µ—â–µ—Å—Ç–≤–∞–º–∏
        """
        try:
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            resized_image = self.resize_image(image_bytes)
            
            # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            base64_image = self.encode_image(resized_image)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
            response = self.client.chat.completions.create(
                model=config.AI_MODEL,
                messages=[
                    {
                        "role": "user",
                        "content": [
                            {
                                "type": "text",
                                "text": config.CALORIE_PROMPT
                            },
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/jpeg;base64,{base64_image}",
                                    "detail": "high"
                                }
                            }
                        ]
                    }
                ],
                max_tokens=config.MAX_TOKENS,
                temperature=0.1
            )
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            content = response.choices[0].message.content
            logger.info(f"AI –æ—Ç–≤–µ—Ç: {content}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            result = self._parse_ai_response(content)
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return {
                "food_items": [],
                "total_calories": 0,
                "confidence": 0,
                "error": str(e)
            }
    
    def _parse_ai_response(self, content):
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ AI"""
        try:
            # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
            start_idx = content.find('{')
            end_idx = content.rfind('}') + 1
            
            if start_idx != -1 and end_idx != 0:
                json_str = content[start_idx:end_idx]
                result = json.loads(json_str)
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if not isinstance(result, dict):
                    raise ValueError("–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                required_fields = ['food_items', 'total_calories', 'confidence']
                for field in required_fields:
                    if field not in result:
                        result[field] = 0 if field != 'food_items' else []
                
                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ food_items —ç—Ç–æ —Å–ø–∏—Å–æ–∫
                if not isinstance(result['food_items'], list):
                    result['food_items'] = []
                
                # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–µ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞
                total_proteins = sum(item.get('proteins', 0) for item in result['food_items'])
                total_carbs = sum(item.get('carbs', 0) for item in result['food_items'])
                total_fats = sum(item.get('fats', 0) for item in result['food_items'])
                
                result['total_proteins'] = total_proteins
                result['total_carbs'] = total_carbs
                result['total_fats'] = total_fats
                
                return result
            else:
                raise ValueError("JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                
        except (json.JSONDecodeError, ValueError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ AI: {e}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ö–æ—Ç—è –±—ã –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            return {
                "food_items": [],
                "total_calories": 0,
                "total_proteins": 0,
                "total_carbs": 0,
                "total_fats": 0,
                "confidence": 0,
                "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –µ–¥—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏",
                "raw_response": content
            }
    
    def format_analysis_result(self, result):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if result.get('confidence', 0) == 0 or result.get('total_calories', 0) == 0:
            return f"{config.EMOJIS['warning']} –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –µ–¥—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞."
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        message = f"{config.EMOJIS['food']} **–ê–Ω–∞–ª–∏–∑ –±–ª—é–¥–∞**\n\n"
        
        # –û–±—â–∏–µ –∫–∞–ª–æ—Ä–∏–∏
        message += f"{config.EMOJIS['fire']} **–û–±—â–∏–µ –∫–∞–ª–æ—Ä–∏–∏:** {result['total_calories']:.0f} –∫–∫–∞–ª\n\n"
        
        # –ü–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞
        if result.get('total_proteins', 0) > 0:
            message += f"{config.EMOJIS['muscle']} **–ë–µ–ª–∫–∏:** {result['total_proteins']:.1f}–≥\n"
        if result.get('total_carbs', 0) > 0:
            message += f"üçû **–£–≥–ª–µ–≤–æ–¥—ã:** {result['total_carbs']:.1f}–≥\n"
        if result.get('total_fats', 0) > 0:
            message += f"ü•ë **–ñ–∏—Ä—ã:** {result['total_fats']:.1f}–≥\n"
        
        # –î–µ—Ç–∞–ª–∏ –±–ª—é–¥
        if result.get('food_items'):
            message += f"\nüìù **–°–æ—Å—Ç–∞–≤:**\n"
            for i, item in enumerate(result['food_items'], 1):
                name = item.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –±–ª—é–¥–æ')
                calories = item.get('calories', 0)
                portion = item.get('portion_size', '')
                
                message += f"{i}. {name}"
                if portion:
                    message += f" ({portion})"
                message += f" - {calories:.0f} –∫–∫–∞–ª\n"
        
        # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI
        confidence = result.get('confidence', 0)
        if confidence > 80:
            confidence_emoji = config.EMOJIS['checkmark']
        elif confidence > 60:
            confidence_emoji = config.EMOJIS['warning']
        else:
            confidence_emoji = config.EMOJIS['error']
        
        message += f"\n{confidence_emoji} **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞:** {confidence:.0f}%"
        
        return message

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
analyzer = CalorieAnalyzer()
