"""
–ú–æ–¥–µ–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π
"""
from sqlalchemy import create_engine, Column, Integer, String, DateTime, Text, Float, Boolean, ForeignKey, func, BigInteger, text
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship
from datetime import datetime, timezone, timedelta
import config

Base = declarative_base()

class User(Base):
    """–ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    __tablename__ = 'users'
    
    id = Column(Integer, primary_key=True)
    telegram_id = Column(BigInteger, unique=True, nullable=False)
    username = Column(String(255))
    first_name = Column(String(255))
    last_name = Column(String(255))
    created_at = Column(DateTime, default=lambda: datetime.now(timezone.utc))
    is_active = Column(Boolean, default=True)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    daily_calorie_goal = Column(Integer, default=2000)
    weight = Column(Float)
    height = Column(Float)
    age = Column(Integer)
    gender = Column(String(10))  # male/female
    activity_level = Column(String(20), default='moderate')  # low/moderate/high
    # onboarding_completed = Column(Boolean, default=False)  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    
    # –°–≤—è–∑–∏
    food_entries = relationship("FoodEntry", back_populates="user", cascade="all, delete-orphan")
    
    def calculate_daily_calorie_goal(self):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞"""
        if not all([self.weight, self.height, self.age, self.gender]):
            return 2000  # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
        
        # –ë–∞–∑–∞–ª—å–Ω—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞
        if self.gender.lower() == 'male':
            bmr = (10 * self.weight) + (6.25 * self.height) - (5 * self.age) + 5
        else:  # female
            bmr = (10 * self.weight) + (6.25 * self.height) - (5 * self.age) - 161
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        activity_multipliers = {
            'low': 1.2,      # –ú–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏
            'moderate': 1.55, # –£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            'high': 1.9      # –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        }
        
        multiplier = activity_multipliers.get(self.activity_level, 1.55)
        daily_calories = int(bmr * multiplier)
        
        return daily_calories

    def __repr__(self):
        return f"<User(telegram_id={self.telegram_id}, username={self.username})>"

class FoodEntry(Base):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø–∏—Å–∏ –æ –µ–¥–µ"""
    __tablename__ = 'food_entries'
    
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('users.id'), nullable=False)
    created_at = Column(DateTime, default=lambda: datetime.now(timezone.utc))
    
    # –î–∞–Ω–Ω—ã–µ –æ –µ–¥–µ
    food_items = Column(Text)  # JSON —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –±–ª—é–¥–∞—Ö
    total_calories = Column(Float, nullable=False)
    total_proteins = Column(Float, default=0)
    total_carbs = Column(Float, default=0)
    total_fats = Column(Float, default=0)
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    confidence = Column(Float, default=0)  # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI –≤ –∞–Ω–∞–ª–∏–∑–µ
    meal_type = Column(String(20))  # breakfast/lunch/dinner/snack
    photo_id = Column(String(255))  # ID —Ñ–æ—Ç–æ –≤ Telegram
    
    # –°–≤—è–∑–∏
    user = relationship("User", back_populates="food_entries")
    
    def __repr__(self):
        return f"<FoodEntry(user_id={self.user_id}, calories={self.total_calories}, date={self.created_at})>"

class DailyStats(Base):
    """–ú–æ–¥–µ–ª—å –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    __tablename__ = 'daily_stats'
    
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('users.id'), nullable=False)
    date = Column(DateTime, nullable=False)
    
    # –°—É–º–º–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –¥–µ–Ω—å
    total_calories = Column(Float, default=0)
    total_proteins = Column(Float, default=0)
    total_carbs = Column(Float, default=0)
    total_fats = Column(Float, default=0)
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
    meals_count = Column(Integer, default=0)
    
    created_at = Column(DateTime, default=lambda: datetime.now(timezone.utc))
    updated_at = Column(DateTime, default=lambda: datetime.now(timezone.utc), onupdate=lambda: datetime.now(timezone.utc))

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine = create_engine(config.DATABASE_URL, echo=False)

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

def migrate_telegram_id_if_needed():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è telegram_id —Å INTEGER –Ω–∞ BIGINT –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ"""
    import logging
    logger = logging.getLogger(__name__)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è PostgreSQL
    if not config.DATABASE_URL.startswith('postgresql'):
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite, –º–∏–≥—Ä–∞—Ü–∏—è telegram_id –Ω–µ –Ω—É–∂–Ω–∞")
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–ø –ø–æ–ª—è telegram_id
        with engine.connect() as connection:
            result = connection.execute(text("""
                SELECT data_type 
                FROM information_schema.columns 
                WHERE table_name = 'users' 
                AND column_name = 'telegram_id'
            """))
            
            row = result.fetchone()
            if not row:
                logger.info("–¢–∞–±–ª–∏—Ü–∞ users –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞")
                return
            
            current_type = row[0]
            logger.info(f"–¢–µ–∫—É—â–∏–π —Ç–∏–ø telegram_id: {current_type}")
            
            if current_type == 'bigint':
                logger.info("‚úÖ –ü–æ–ª–µ telegram_id —É–∂–µ –∏–º–µ–µ—Ç —Ç–∏–ø BIGINT")
                return
            
            if current_type == 'integer':
                logger.info("üîß –ù–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –º–∏–≥—Ä–∞—Ü–∏—é telegram_id: INTEGER ‚Üí BIGINT")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                with connection.begin() as transaction:
                    migration_steps = [
                        ("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏", "ALTER TABLE users ADD COLUMN telegram_id_new BIGINT"),
                        ("–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", "UPDATE users SET telegram_id_new = telegram_id"),
                        ("–£–¥–∞–ª–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏", "ALTER TABLE users DROP CONSTRAINT IF EXISTS users_telegram_id_key"),
                        ("–£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞", "DROP INDEX IF EXISTS ix_users_telegram_id"), 
                        ("–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –∫–æ–ª–æ–Ω–∫–∏", "ALTER TABLE users DROP COLUMN telegram_id"),
                        ("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏", "ALTER TABLE users RENAME COLUMN telegram_id_new TO telegram_id"),
                        ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ NOT NULL", "ALTER TABLE users ALTER COLUMN telegram_id SET NOT NULL"),
                        ("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏", "ALTER TABLE users ADD CONSTRAINT users_telegram_id_key UNIQUE (telegram_id)"),
                        ("–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞", "CREATE INDEX ix_users_telegram_id ON users (telegram_id)")
                    ]
                    
                    for i, (description, step) in enumerate(migration_steps, 1):
                        try:
                            logger.info(f"–®–∞–≥ {i}/9: {description}")
                            connection.execute(text(step))
                        except Exception as step_error:
                            logger.warning(f"–û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ {i} ({description}): {step_error}")
                            # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —à–∞–≥–∏ –º–æ–≥—É—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                            continue
                    
                    # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–º–º–∏—Ç–∏—Ç—Å—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –±–ª–æ–∫–∞
                    logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è telegram_id –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                    logger.info("üöÄ –¢–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –ª—é–±—ã–µ Telegram ID!")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/–º–∏–≥—Ä–∞—Ü–∏–∏ telegram_id: {e}")
        logger.info("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å —Ç–µ–∫—É—â–µ–π —Å—Ö–µ–º–æ–π...")

def create_tables():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    import logging
    logger = logging.getLogger(__name__)
    
    Base.metadata.create_all(bind=engine)
    logger.info("–¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –º–∏–≥—Ä–∞—Ü–∏—é –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    try:
        migrate_telegram_id_if_needed()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        logger.info("–ë–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É —Å —Ç–µ–∫—É—â–µ–π —Å—Ö–µ–º–æ–π")

def get_db():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    db = SessionLocal()
    try:
        return db
    finally:
        pass  # –°–µ—Å—Å–∏—è –∑–∞–∫—Ä–æ–µ—Ç—Å—è –≤ –∫–æ–¥–µ, –∫–æ—Ç–æ—Ä—ã–π –µ—ë –∏—Å–ø–æ–ª—å–∑—É–µ—Ç

class DatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    @staticmethod
    def get_or_create_user(telegram_id, username=None, first_name=None, last_name=None):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        db = SessionLocal()
        import logging
        logger = logging.getLogger(__name__)
        
        try:
            user = db.query(User).filter(User.telegram_id == telegram_id).first()
            
            if not user:
                user = User(
                    telegram_id=telegram_id,
                    username=username,
                    first_name=first_name,
                    last_name=last_name,
                    daily_calorie_goal=2000  # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Ü–µ–ª—å –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                )
                db.add(user)
                db.commit()
                db.refresh(user)
                
                logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} —Å —Ü–µ–ª—å—é {user.daily_calorie_goal} –∫–∫–∞–ª")
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                updated = False
                if username and user.username != username:
                    user.username = username
                    updated = True
                if first_name and user.first_name != first_name:
                    user.first_name = first_name
                    updated = True
                if last_name and user.last_name != last_name:
                    user.last_name = last_name
                    updated = True
                
                if updated:
                    db.commit()
                    db.refresh(user)
                
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} —Å —Ü–µ–ª—å—é {user.daily_calorie_goal} –∫–∫–∞–ª")
                
            return user
        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –≤–∫–ª—é—á–∞—è integer out of range
            db.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {telegram_id}: {e}")
            
            # –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ integer out of range, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é —Å—Ö–µ–º—É
            if "integer out of range" in str(e).lower() or "numericvalueoutofrange" in str(type(e).__name__).lower():
                logger.error(f"Telegram ID {telegram_id} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                logger.error("–¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã: telegram_id INTEGER ‚Üí BIGINT")
                
                # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
                class TempUser:
                    def __init__(self):
                        self.id = None
                        self.telegram_id = telegram_id
                        self.username = username
                        self.first_name = first_name  
                        self.last_name = last_name
                        self.daily_calorie_goal = 2000
                        self.weight = None
                        self.height = None
                        self.age = None
                        self.gender = None
                        self.activity_level = 'moderate'
                    
                    def calculate_daily_calorie_goal(self):
                        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π"""
                        if not all([self.weight, self.height, self.age, self.gender]):
                            return 2000
                        
                        # –ë–∞–∑–∞–ª—å–Ω—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º
                        if self.gender.lower() == 'male':
                            bmr = (10 * self.weight) + (6.25 * self.height) - (5 * self.age) + 5
                        else:
                            bmr = (10 * self.weight) + (6.25 * self.height) - (5 * self.age) - 161
                        
                        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                        activity_multipliers = {'low': 1.2, 'moderate': 1.55, 'high': 1.9}
                        multiplier = activity_multipliers.get(self.activity_level, 1.55)
                        return int(bmr * multiplier)
                        
                return TempUser()
            
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            class TempUser:
                def __init__(self):
                    self.id = None
                    self.telegram_id = telegram_id
                    self.username = username
                    self.first_name = first_name
                    self.last_name = last_name  
                    self.daily_calorie_goal = 2000
                    self.weight = None
                    self.height = None
                    self.age = None
                    self.gender = None
                    self.activity_level = 'moderate'
                
                def calculate_daily_calorie_goal(self):
                    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π"""
                    if not all([self.weight, self.height, self.age, self.gender]):
                        return 2000
                    
                    # –ë–∞–∑–∞–ª—å–Ω—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º
                    if self.gender.lower() == 'male':
                        bmr = (10 * self.weight) + (6.25 * self.height) - (5 * self.age) + 5
                    else:
                        bmr = (10 * self.weight) + (6.25 * self.height) - (5 * self.age) - 161
                    
                    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    activity_multipliers = {'low': 1.2, 'moderate': 1.55, 'high': 1.9}
                    multiplier = activity_multipliers.get(self.activity_level, 1.55)
                    return int(bmr * multiplier)
            
            return TempUser()
        finally:
            db.close()
    
    @staticmethod
    def add_food_entry(user_id, food_data, total_calories, total_proteins=0, total_carbs=0, total_fats=0, 
                      confidence=0, meal_type=None, photo_id=None):
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –æ –µ–¥–µ"""
        db = SessionLocal()
        try:
            entry = FoodEntry(
                user_id=user_id,
                food_items=food_data,
                total_calories=total_calories,
                total_proteins=total_proteins,
                total_carbs=total_carbs,
                total_fats=total_fats,
                confidence=confidence,
                meal_type=meal_type,
                photo_id=photo_id
            )
            db.add(entry)
            db.commit()
            db.refresh(entry)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            DatabaseManager._update_daily_stats(user_id, entry.created_at.date())
            
            return entry
        finally:
            db.close()
    
    @staticmethod
    def _update_daily_stats(user_id, date):
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        db = SessionLocal()
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∑–∞ –¥–µ–Ω—å —Å —É—á–µ—Ç–æ–º UTC –≤—Ä–µ–º–µ–Ω–∏
            start_of_day = datetime.combine(date, datetime.min.time()).replace(tzinfo=timezone.utc)
            end_of_day = datetime.combine(date, datetime.max.time()).replace(tzinfo=timezone.utc)
            
            entries = db.query(FoodEntry).filter(
                FoodEntry.user_id == user_id,
                FoodEntry.created_at >= start_of_day,
                FoodEntry.created_at < end_of_day
            ).all()
            
            # –°—á–∏—Ç–∞–µ–º —Å—É–º–º—ã
            total_calories = sum(entry.total_calories for entry in entries)
            total_proteins = sum(entry.total_proteins for entry in entries)
            total_carbs = sum(entry.total_carbs for entry in entries)
            total_fats = sum(entry.total_fats for entry in entries)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            daily_stat = db.query(DailyStats).filter(
                DailyStats.user_id == user_id,
                DailyStats.date == date
            ).first()
            
            if not daily_stat:
                daily_stat = DailyStats(
                    user_id=user_id,
                    date=date
                )
                db.add(daily_stat)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            daily_stat.total_calories = total_calories
            daily_stat.total_proteins = total_proteins
            daily_stat.total_carbs = total_carbs
            daily_stat.total_fats = total_fats
            daily_stat.meals_count = len(entries)
            daily_stat.updated_at = datetime.now(timezone.utc)
            
            db.commit()
            
            # –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            import logging
            logger = logging.getLogger(__name__)
            logger.info(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è user_id {user_id} –∑–∞ {date}: {total_calories:.1f} –∫–∫–∞–ª, {len(entries)} –∑–∞–ø–∏—Å–µ–π")
            
        finally:
            db.close()
    
    @staticmethod
    def get_user_stats(user_id, days=7):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π"""
        db = SessionLocal()
        try:
            from datetime import timedelta
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC –≤—Ä–µ–º—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π
            end_date = datetime.now(timezone.utc).date()
            start_date = end_date - timedelta(days=days-1)
            
            stats = db.query(DailyStats).filter(
                DailyStats.user_id == user_id,
                DailyStats.date >= start_date,
                DailyStats.date <= end_date
            ).order_by(DailyStats.date).all()
            
            # –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç get_user_stats
            import logging
            logger = logging.getLogger(__name__)
            logger.info(f"üìà get_user_stats –¥–ª—è user_id {user_id}: –Ω–∞–π–¥–µ–Ω–æ {len(stats)} –∑–∞–ø–∏—Å–µ–π –∑–∞ {days} –¥–Ω–µ–π ({start_date} - {end_date})")
            
            return stats
        finally:
            db.close()
    
    @staticmethod
    def get_today_calories(user_id):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–∞–ª–æ—Ä–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è - —Å –ø—Ä—è–º—ã–º –ø–æ–¥—Å—á–µ—Ç–æ–º –∏–∑ –∑–∞–ø–∏—Å–µ–π –µ–¥—ã"""
        db = SessionLocal()
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–Ω—è –≤ UTC
            today = datetime.now(timezone.utc).date()
            start_of_day = datetime.combine(today, datetime.min.time()).replace(tzinfo=timezone.utc)
            end_of_day = datetime.combine(today, datetime.max.time()).replace(tzinfo=timezone.utc)
            
            today_calories = db.query(func.sum(FoodEntry.total_calories)).filter(
                FoodEntry.user_id == user_id,
                FoodEntry.created_at >= start_of_day,
                FoodEntry.created_at <= end_of_day
            ).scalar() or 0
            
            return float(today_calories)
        finally:
            db.close()
    
    @staticmethod
    def update_user_settings(user_id, daily_calorie_goal=None, weight=None, height=None, 
                           age=None, gender=None, activity_level=None):
        """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        db = SessionLocal()
        try:
            user = db.query(User).filter(User.id == user_id).first()
            if user:
                old_goal = user.daily_calorie_goal
                
                if daily_calorie_goal is not None:
                    user.daily_calorie_goal = daily_calorie_goal
                if weight is not None:
                    user.weight = weight
                if height is not None:
                    user.height = height
                if age is not None:
                    user.age = age
                if gender is not None:
                    user.gender = gender
                if activity_level is not None:
                    user.activity_level = activity_level
                
                db.commit()
                db.refresh(user)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                if daily_calorie_goal is not None:
                    import logging
                    logger = logging.getLogger(__name__)
                    logger.info(f"–¶–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} –∏–∑–º–µ–Ω–µ–Ω–∞: {old_goal} ‚Üí {user.daily_calorie_goal} –∫–∫–∞–ª")
                
                return user
        finally:
            db.close()

    @staticmethod  
    def get_user_info(telegram_id):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        db = SessionLocal()
        try:
            user = db.query(User).filter(User.telegram_id == telegram_id).first()
            if not user:
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–∏
            today_calories = DatabaseManager.get_today_calories(user.id)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω—é—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            recent_stats = DatabaseManager.get_user_stats(user.id, days=7)
            
            return {
                'user': user,
                'today_calories': today_calories,
                'daily_goal': user.daily_calorie_goal,
                'remaining_calories': user.daily_calorie_goal - today_calories,
                'recent_stats': recent_stats,
                'total_entries_last_week': len(recent_stats) if recent_stats else 0
            }
        finally:
            db.close()

    @staticmethod
    def force_update_user_goal(telegram_id, new_goal):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id"""
        db = SessionLocal()
        try:
            user = db.query(User).filter(User.telegram_id == telegram_id).first()
            if user:
                old_goal = user.daily_calorie_goal
                user.daily_calorie_goal = new_goal
                db.commit()
                
                import logging
                logger = logging.getLogger(__name__)
                logger.info(f"–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –∏–∑–º–µ–Ω–µ–Ω–∞ —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {old_goal} ‚Üí {new_goal} –∫–∫–∞–ª")
                
                return True
        finally:
            db.close()
        return False

    @staticmethod
    def get_user_info(user_id: int) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        db = SessionLocal()
        try:
            # –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–∏
            today = datetime.now(timezone.utc).date()
            today_calories = db.query(func.sum(FoodEntry.total_calories)).filter(
                FoodEntry.user_id == user_id,
                func.date(FoodEntry.created_at) == today
            ).scalar() or 0
            
            # –°—Ä–µ–¥–Ω–∏–µ –∑–∞ –Ω–µ–¥–µ–ª—é
            week_ago = datetime.now(timezone.utc) - timedelta(days=7)
            week_entries = db.query(FoodEntry).filter(
                FoodEntry.user_id == user_id,
                FoodEntry.created_at >= week_ago
            ).all()
            
            week_total = sum(entry.total_calories for entry in week_entries)
            week_avg = week_total / 7 if week_entries else 0
            
            # –°—Ä–µ–¥–Ω–∏–µ –∑–∞ –º–µ—Å—è—Ü
            month_ago = datetime.now(timezone.utc) - timedelta(days=30)
            month_entries = db.query(FoodEntry).filter(
                FoodEntry.user_id == user_id,
                FoodEntry.created_at >= month_ago
            ).all()
            
            month_total = sum(entry.total_calories for entry in month_entries)
            month_avg = month_total / 30 if month_entries else 0
            
            return {
                'today_calories': float(today_calories) if today_calories else 0.0,
                'week_avg': float(week_avg) if week_avg else 0.0,
                'month_avg': float(month_avg) if month_avg else 0.0
            }
        finally:
            db.close()

    @staticmethod
    def get_tracking_days(user_id: int) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤–µ–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π"""
        db = SessionLocal()
        try:
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–Ω–µ–π —Å –∑–∞–ø–∏—Å—è–º–∏
            days_count = db.query(
                func.count(func.distinct(func.date(FoodEntry.created_at)))
            ).filter(FoodEntry.user_id == user_id).scalar()
            
            return days_count or 0
        finally:
            db.close()

    @staticmethod
    def get_daily_calorie_history(user_id: int, days: int = 14) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–∞–ª–æ—Ä–∏–π –ø–æ –¥–Ω—è–º"""
        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π
            start_date = datetime.now(timezone.utc) - timedelta(days=days)
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º –∏ —Å—É–º–º–∏—Ä—É–µ–º –∫–∞–ª–æ—Ä–∏–∏
            results = db.query(
                func.date(FoodEntry.created_at).label('date'),
                func.sum(FoodEntry.total_calories).label('calories')
            ).filter(
                FoodEntry.user_id == user_id,
                FoodEntry.created_at >= start_date
            ).group_by(
                func.date(FoodEntry.created_at)
            ).order_by(
                func.date(FoodEntry.created_at).desc()
            ).all()
            
            return [
                {
                    'date': result.date,
                    'calories': float(result.calories or 0)
                }
                for result in results
            ]
        finally:
            db.close()

    @staticmethod
    def get_weekly_stats(user_id: int) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–µ–¥–µ–ª—è–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 –Ω–µ–¥–µ–ª–∏)"""
        db = SessionLocal()
        try:
            weekly_stats = []
            
            for week_num in range(4):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã –Ω–µ–¥–µ–ª–∏
                end_date = datetime.now(timezone.utc) - timedelta(days=week_num * 7)
                start_date = end_date - timedelta(days=6)  # 7 –¥–Ω–µ–π –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
                
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
                week_entries = db.query(FoodEntry).filter(
                    FoodEntry.user_id == user_id,
                    FoodEntry.created_at >= start_date,
                    FoodEntry.created_at <= end_date
                ).all()
                
                if week_entries:
                    # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    total_calories = sum(entry.total_calories for entry in week_entries)
                    unique_days = len(set(entry.created_at.date() for entry in week_entries))
                    avg_calories = total_calories / 7  # —Å—Ä–µ–¥–Ω–µ–µ –∑–∞ 7 –¥–Ω–µ–π
                    
                    weekly_stats.append({
                        'week_start': start_date.date(),
                        'week_end': end_date.date(),
                        'total_calories': total_calories,
                        'avg_calories': avg_calories,
                        'days_tracked': unique_days
                    })
            
            return weekly_stats
        finally:
            db.close()

    @staticmethod
    def get_admin_stats():
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–æ—Ç—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        db = SessionLocal()
        try:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            total_users = db.query(func.count(User.id)).scalar() or 0
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Å –∑–∞–ø–∏—Å—è–º–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
            week_ago = datetime.now(timezone.utc) - timedelta(days=7)
            active_users = db.query(func.count(func.distinct(FoodEntry.user_id))).filter(
                FoodEntry.created_at >= week_ago
            ).scalar() or 0
            
            # –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –æ –µ–¥–µ
            total_food_entries = db.query(func.count(FoodEntry.id)).scalar() or 0
            
            # –ó–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today_start = datetime.now(timezone.utc).replace(hour=0, minute=0, second=0, microsecond=0)
            today_entries = db.query(func.count(FoodEntry.id)).filter(
                FoodEntry.created_at >= today_start
            ).scalar() or 0
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ —Ü–µ–ª—è–º–∏ –∫–∞–ª–æ—Ä–∏–π (–Ω–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ)
            configured_users = db.query(func.count(User.id)).filter(
                User.daily_calorie_goal != 2000
            ).scalar() or 0
            
            # –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Ç–æ–ø 5)
            top_users = db.query(
                User.first_name, 
                User.telegram_id,
                func.count(FoodEntry.id).label('entries_count')
            ).join(FoodEntry).group_by(User.id, User.first_name, User.telegram_id).order_by(
                func.count(FoodEntry.id).desc()
            ).limit(5).all()
            
            return {
                'total_users': total_users,
                'active_users_7d': active_users,
                'total_food_entries': total_food_entries,
                'today_entries': today_entries,
                'configured_users': configured_users,
                'top_users': [
                    {
                        'name': user.first_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                        'telegram_id': user.telegram_id,
                        'entries_count': user.entries_count
                    }
                    for user in top_users
                ]
            }
        finally:
            db.close()

    @staticmethod
    def get_all_users_summary():
        """–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        db = SessionLocal()
        try:
            users = db.query(User).order_by(User.created_at.desc()).all()
            
            users_summary = []
            for user in users:
                # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                entries_count = db.query(func.count(FoodEntry.id)).filter(
                    FoodEntry.user_id == user.id
                ).scalar() or 0
                
                # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                last_entry = db.query(FoodEntry.created_at).filter(
                    FoodEntry.user_id == user.id
                ).order_by(FoodEntry.created_at.desc()).first()
                
                last_activity = None
                if last_entry:
                    last_activity = last_entry[0]
                    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ datetime –∏–º–µ–µ—Ç timezone info
                    if last_activity and last_activity.tzinfo is None:
                        last_activity = last_activity.replace(tzinfo=timezone.utc)
                
                users_summary.append({
                    'id': user.id,
                    'telegram_id': user.telegram_id,
                    'name': user.first_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    'username': user.username,
                    'created_at': user.created_at.replace(tzinfo=timezone.utc) if user.created_at and user.created_at.tzinfo is None else user.created_at,
                    'last_activity': last_activity,
                    'entries_count': entries_count,
                    'daily_calorie_goal': user.daily_calorie_goal,
                    'weight': user.weight,
                    'height': user.height
                })
            
            return users_summary
        finally:
            db.close()

    @staticmethod
    def get_user_detailed_info(telegram_id: int):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        db = SessionLocal()
        try:
            user = db.query(User).filter(User.telegram_id == telegram_id).first()
            if not user:
                return None
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            total_entries = db.query(func.count(FoodEntry.id)).filter(
                FoodEntry.user_id == user.id
            ).scalar() or 0
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π
            recent_entries = db.query(FoodEntry).filter(
                FoodEntry.user_id == user.id
            ).order_by(FoodEntry.created_at.desc()).limit(5).all()
            
            # –û–±—â–∏–µ –∫–∞–ª–æ—Ä–∏–∏ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
            total_calories = db.query(func.sum(FoodEntry.total_calories)).filter(
                FoodEntry.user_id == user.id
            ).scalar() or 0
            
            # –û–±—â–∏–µ –¥–Ω–∏ —Å –∑–∞–ø–∏—Å—è–º–∏
            unique_days = db.query(
                func.count(func.distinct(func.date(FoodEntry.created_at)))
            ).filter(FoodEntry.user_id == user.id).scalar() or 0
            
            avg_calories_per_day = float(total_calories) / unique_days if unique_days > 0 else 0
            
            return {
                'user': user,
                'total_entries': total_entries,
                'total_calories': float(total_calories),
                'unique_days': unique_days,
                'avg_calories_per_day': avg_calories_per_day,
                'recent_entries': [
                    {
                        'created_at': entry.created_at.replace(tzinfo=timezone.utc) if entry.created_at and entry.created_at.tzinfo is None else entry.created_at,
                        'calories': entry.total_calories,
                        'confidence': entry.confidence,
                        'food_items': entry.food_items[:100] + '...' if entry.food_items and len(entry.food_items) > 100 else entry.food_items
                    }
                    for entry in recent_entries
                ]
            }
        finally:
            db.close()
    
    @staticmethod
    def complete_onboarding(telegram_id: int, weight: float, height: float, age: int, gender: str, activity_level: str):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π"""
        import logging
        logger = logging.getLogger(__name__)
        db = SessionLocal()
        
        try:
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
            logger.info(f"–î–∞–Ω–Ω—ã–µ: –≤–µ—Å={weight}, —Ä–æ—Å—Ç={height}, –≤–æ–∑—Ä–∞—Å—Ç={age}, –ø–æ–ª={gender}, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å={activity_level}")
            
            user = db.query(User).filter(User.telegram_id == telegram_id).first()
            if not user:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑ –ë–î
            if not hasattr(user, 'id') or user.id is None:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} —è–≤–ª—è–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω—ã–º, –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.info(f"–û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
            user.weight = float(weight)
            user.height = float(height) 
            user.age = int(age)
            user.gender = str(gender).lower()
            user.activity_level = str(activity_level)
            
            logger.info(f"–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: weight={user.weight}, height={user.height}, age={user.age}, gender={user.gender}, activity_level={user.activity_level}")
            
            # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: onboarding_completed –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –Ω–∞–ª–∏—á–∏–µ–º –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π
            try:
                logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
                calculated_goal = user.calculate_daily_calorie_goal()
                logger.info(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {calculated_goal}")
                user.daily_calorie_goal = calculated_goal
            except Exception as calc_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∫–∞–ª–æ—Ä–∏–π: {calc_error}")
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                user.daily_calorie_goal = 2000
                logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {user.daily_calorie_goal}")
            
            logger.info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
            db.commit()
            logger.info(f"‚úÖ –û–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}. –¶–µ–ª—å –∫–∞–ª–æ—Ä–∏–π: {user.daily_calorie_goal}")
            return user.daily_calorie_goal
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –¥–ª—è {telegram_id}: {e}")
            logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            import traceback
            logger.error(f"–ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")
            db.rollback()
            return False
        finally:
            db.close()

    @staticmethod 
    def is_onboarding_completed(telegram_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        db = SessionLocal()
        try:
            user = db.query(User).filter(User.telegram_id == telegram_id).first()
            if not user:
                return False
            
            # –°—á–∏—Ç–∞–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à–µ–ª –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            return bool(user.weight and user.height and user.age and user.gender)
        finally:
            db.close()
