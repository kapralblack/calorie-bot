"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π
"""
import asyncio
import logging
import json
from datetime import datetime, timedelta
import schedule
import threading
import time
from io import BytesIO

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from telegram.constants import ParseMode

import config
from database import DatabaseManager, create_tables
from ai_analyzer import analyzer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class CalorieBotHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞"""
    
    @staticmethod
    async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user = update.effective_user
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        context.user_data.pop('preserve_analysis_message', None)
        
        telegram_user = DatabaseManager.get_or_create_user(
            telegram_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        welcome_message = f"""
{config.EMOJIS['apple']} **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {config.BOT_NAME}!**

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º –µ–¥—ã.

**–ß—Ç–æ —è —É–º–µ—é:**
{config.EMOJIS['food']} –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –µ–¥—ã –∏ —Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏
{config.EMOJIS['stats']} –í–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∏—Ç–∞–Ω–∏—è
{config.EMOJIS['chart']} –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
{config.EMOJIS['settings']} –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ü–µ–ª–∏ –∫–∞–ª–æ—Ä–∏–π

**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–π –µ–¥—ã
2. –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏ –ø–æ—Å—á–∏—Ç–∞—é –∫–∞–ª–æ—Ä–∏–∏
3. –°–º–æ—Ç—Ä–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ —Ü–µ–ª—è–º–∏

–ù–∞—á–Ω–∏—Ç–µ —Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –µ–¥—ã –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:
"""
        
        keyboard = [
            [InlineKeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile")],
            [InlineKeyboardButton(f"{config.EMOJIS['stats']} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton(f"{config.EMOJIS['settings']} –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
            [InlineKeyboardButton(f"{config.EMOJIS['help']} –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ callback query –∏–ª–∏ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.callback_query:
            # –≠—Ç–æ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
            await update.callback_query.edit_message_text(
                welcome_message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
        else:
            # –≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /start
            await update.message.reply_text(
                welcome_message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
    
    @staticmethod 
    async def fix_goal_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–ª–∏ –∫–∞–ª–æ—Ä–∏–π"""
        user = update.effective_user
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª—å 3000 –∫–∫–∞–ª
        success = DatabaseManager.force_update_user_goal(user.id, 3000)
        
        if success:
            message = f"‚úÖ **–¶–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!**\n\n–í–∞—à–∞ –Ω–æ–≤–∞—è —Ü–µ–ª—å: **3000 –∫–∫–∞–ª –≤ –¥–µ–Ω—å**\n\n–¢–µ–ø–µ—Ä—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ!"
        else:
            message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        
        await update.message.reply_text(
            message,
            parse_mode=ParseMode.MARKDOWN
        )
    
    @staticmethod
    async def test_ai_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ OpenAI API"""
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
        if config.ADMIN_USER_ID and str(user.id) != config.ADMIN_USER_ID:
            await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            return
        
        await update.message.reply_text("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º OpenAI API...")
        
        try:
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            from ai_analyzer import analyzer
            test_response = analyzer.client.chat.completions.create(
                model=config.AI_MODEL,
                messages=[{"role": "user", "content": "–û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: '—Ä–∞–±–æ—Ç–∞—é'"}],
                max_tokens=10
            )
            
            ai_response = test_response.choices[0].message.content
            await update.message.reply_text(f"‚úÖ OpenAI API —Ä–∞–±–æ—Ç–∞–µ—Ç: {ai_response}")
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ OpenAI API: {str(e)}")
            import traceback
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è OpenAI: {traceback.format_exc()}")

    @staticmethod
    async def debug_user_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /debuguser - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        user = update.effective_user
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_user = DatabaseManager.get_or_create_user(telegram_id=user.id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            tracking_days = DatabaseManager.get_tracking_days(db_user.id)
            today_calories = DatabaseManager.get_today_calories(db_user.id)
            
            message = f"""
üîç **–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**

üë§ **–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**
‚Ä¢ Telegram ID: `{user.id}`
‚Ä¢ ID –≤ –ë–î: `{db_user.id}`
‚Ä¢ –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:**
‚Ä¢ –¶–µ–ª—å –∫–∞–ª–æ—Ä–∏–π: {db_user.daily_calorie_goal} –∫–∫–∞–ª/–¥–µ–Ω—å
‚Ä¢ –í–µ—Å: {db_user.weight or '–ù–µ —É–∫–∞–∑–∞–Ω'} {' –∫–≥' if db_user.weight else ''}
‚Ä¢ –†–æ—Å—Ç: {db_user.height or '–ù–µ —É–∫–∞–∑–∞–Ω'} {' —Å–º' if db_user.height else ''}
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {db_user.age or '–ù–µ —É–∫–∞–∑–∞–Ω'} {' –ª–µ—Ç' if db_user.age else ''}
‚Ä¢ –ü–æ–ª: {('–º—É–∂—Å–∫–æ–π' if db_user.gender == 'male' else '–∂–µ–Ω—Å–∫–∏–π') if db_user.gender else '–ù–µ —É–∫–∞–∑–∞–Ω'}

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –î–Ω–µ–π —Å –∑–∞–ø–∏—Å—è–º–∏: {tracking_days}
‚Ä¢ –ö–∞–ª–æ—Ä–∏–π —Å–µ–≥–æ–¥–Ω—è: {today_calories:.1f}
‚Ä¢ –°–æ–∑–¥–∞–Ω: {db_user.created_at.strftime('%d.%m.%Y %H:%M') if db_user.created_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}

üîß **For fixing data use:**
/fixgoal - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å 3000 –∫–∫–∞–ª
‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
"""
            
            await update.message.reply_text(
                message, 
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")

    @staticmethod 
    async def reset_user_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /resetuser - –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        user = update.effective_user
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_user = DatabaseManager.get_or_create_user(telegram_id=user.id)
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
            updated_user = DatabaseManager.update_user_settings(
                db_user.id,
                daily_calorie_goal=2000,
                weight=None,
                height=None,
                age=None,
                gender=None
            )
            
            logger.info(f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —Å–±—Ä–æ—à–µ–Ω –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º")
            
            await update.message.reply_text(
                f"""
üîÑ **–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã**

–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –∫ –∏—Å—Ö–æ–¥–Ω—ã–º:
‚Ä¢ –¶–µ–ª—å –∫–∞–ª–æ—Ä–∏–π: 2000 –∫–∫–∞–ª/–¥–µ–Ω—å  
‚Ä¢ –§–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: —Å–±—Ä–æ—à–µ–Ω—ã

–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–Ω–æ–≤–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑:
‚öôÔ∏è /settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
üéØ /fixgoal - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å 3000 –∫–∫–∞–ª
""", 
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞: {e}")

    @staticmethod 
    async def debug_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /debugstats - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∞–±–ª–∏—Ü DailyStats –∏ FoodEntry"""
        user = update.effective_user
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_user = DatabaseManager.get_or_create_user(telegram_id=user.id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º FoodEntry
            from database import SessionLocal, FoodEntry, DailyStats
            from sqlalchemy import func
            
            db = SessionLocal()
            try:
                # –°—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ FoodEntry
                food_entries_count = db.query(func.count(FoodEntry.id)).filter(
                    FoodEntry.user_id == db_user.id
                ).scalar()
                
                # –°—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ DailyStats
                daily_stats_count = db.query(func.count(DailyStats.id)).filter(
                    DailyStats.user_id == db_user.id
                ).scalar()
                
                # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–ø–∏—Å–∏ FoodEntry
                recent_food_entries = db.query(FoodEntry).filter(
                    FoodEntry.user_id == db_user.id
                ).order_by(FoodEntry.created_at.desc()).limit(3).all()
                
                # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–ø–∏—Å–∏ DailyStats
                recent_daily_stats = db.query(DailyStats).filter(
                    DailyStats.user_id == db_user.id
                ).order_by(DailyStats.date.desc()).limit(3).all()
                
            finally:
                db.close()
            
            message = f"""
üîç **–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö**

üìä **–¢–∞–±–ª–∏—Ü–∞ FoodEntry (–∑–∞–ø–∏—Å–∏ –æ –µ–¥–µ):**
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {food_entries_count}

üìà **–¢–∞–±–ª–∏—Ü–∞ DailyStats (–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞):**  
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {daily_stats_count}

üïê **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ FoodEntry:**
"""
            
            for entry in recent_food_entries:
                message += f"‚Ä¢ {entry.created_at.strftime('%d.%m %H:%M')}: {entry.total_calories:.1f} –∫–∫–∞–ª\n"
            
            message += "\nüìÖ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ DailyStats:**\n"
            
            for stat in recent_daily_stats:
                message += f"‚Ä¢ {stat.date.strftime('%d.%m')}: {stat.total_calories:.1f} –∫–∫–∞–ª ({stat.meals_count} –±–ª—é–¥)\n"
            
            if food_entries_count > 0 and daily_stats_count == 0:
                message += "\n‚ö†Ô∏è **–ü–†–û–ë–õ–ï–ú–ê:** –ï—Å—Ç—å –∑–∞–ø–∏—Å–∏ –µ–¥—ã, –Ω–æ –Ω–µ—Ç –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!"
            
            await update.message.reply_text(
                message, 
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ç–∞–±–ª–∏—Ü: {e}")
            import traceback
            logger.error(f"–û—à–∏–±–∫–∞ debug_stats: {traceback.format_exc()}")

    @staticmethod 
    async def rebuild_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /rebuildstats - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ DailyStats –∏–∑ FoodEntry"""
        user = update.effective_user
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_user = DatabaseManager.get_or_create_user(telegram_id=user.id)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã –∏–∑ FoodEntry
            from database import SessionLocal, FoodEntry
            from sqlalchemy import func
            
            db = SessionLocal()
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                unique_dates = db.query(
                    func.date(FoodEntry.created_at).label('date')
                ).filter(
                    FoodEntry.user_id == db_user.id
                ).distinct().all()
                
            finally:
                db.close()
            
            if not unique_dates:
                await update.message.reply_text("üìä –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
                return
            
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã
            rebuilt_count = 0
            for date_row in unique_dates:
                date = date_row.date
                DatabaseManager._update_daily_stats(db_user.id, date)
                rebuilt_count += 1
            
            message = f"""
‚úÖ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞!**

üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–∞—Ç: {rebuilt_count}
üîÑ –í—Å–µ –∑–∞–ø–∏—Å–∏ DailyStats –æ–±–Ω–æ–≤–ª–µ–Ω—ã

–¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:
üìà –ö–Ω–æ–ø–∫—É "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" - –¥–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ  
üîç /debugstats - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã
"""
            
            await update.message.reply_text(
                message, 
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            import traceback
            logger.error(f"–û—à–∏–±–∫–∞ rebuild_stats: {traceback.format_exc()}")
    
    @staticmethod
    async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_message = f"""
{config.EMOJIS['help']} **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/profile - –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ö–∞–∫ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ–¥—É:**
1. –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ –±–ª—é–¥–∞
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–æ—Ç—É
3. –î–æ–∂–¥–∏—Ç–µ—Å—å –∞–Ω–∞–ª–∏–∑–∞ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥)
4. –ü–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–ª–æ—Ä–∏—è—Ö

**–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:**
‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –µ–¥—É —Ö–æ—Ä–æ—à–æ –æ—Å–≤–µ—â–µ–Ω–Ω–æ–π
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤—Å—é –ø–æ—Ä—Ü–∏—é —Ü–µ–ª–∏–∫–æ–º
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ —Ä–∞–∑–º—ã—Ç—ã—Ö —Ñ–æ—Ç–æ
‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –Ω–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ–º —Ñ–æ–Ω–µ

**–§—É–Ω–∫—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:**
‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏ –∑–∞ –¥–µ–Ω—å/–Ω–µ–¥–µ–ª—é/–º–µ—Å—è—Ü
‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–∞
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤
‚Ä¢ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π

–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ!
"""
        
        keyboard = [
            [InlineKeyboardButton(f"{config.EMOJIS['back']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = update.message or update.callback_query.message
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                help_message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
        else:
            await message.reply_text(
                help_message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
    
    @staticmethod
    async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –µ–¥—ã"""
        user = update.effective_user
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ
        context.user_data.pop('preserve_analysis_message', None)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user = DatabaseManager.get_or_create_user(
            telegram_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        analyzing_message = await update.message.reply_text(
            f"{config.EMOJIS['food']} –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–µ –±–ª—é–¥–æ...\n‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥"
        )
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            photo = update.message.photo[-1]
            file = await context.bot.get_file(photo.file_id)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
            image_bytes = BytesIO()
            await file.download_to_memory(image_bytes)
            image_data = image_bytes.getvalue()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é AI
            result = await analyzer.analyze_food_image(image_data)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            if result.get('error') and result.get('total_calories', 0) == 0:
                await analyzing_message.edit_text(
                    f"{config.EMOJIS['error']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {result['error']}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if result.get('total_calories', 0) > 0:
                DatabaseManager.add_food_entry(
                    user_id=db_user.id,
                    food_data=json.dumps(result['food_items'], ensure_ascii=False),
                    total_calories=result['total_calories'],
                    total_proteins=result.get('total_proteins', 0),
                    total_carbs=result.get('total_carbs', 0),
                    total_fats=result.get('total_fats', 0),
                    confidence=result.get('confidence', 0),
                    photo_id=photo.file_id
                )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            formatted_result = analyzer.format_analysis_result(result)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–Ω–µ–≤–Ω–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø–æ–ª—É—á–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏ –ü–û–°–õ–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
            today_calories = DatabaseManager.get_today_calories(db_user.id)
            daily_goal = db_user.daily_calorie_goal
            remaining = daily_goal - today_calories
            
            progress_message = f"\n\n{config.EMOJIS['chart']} **–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –¥–µ–Ω—å:**\n"
            progress_message += f"–°—ä–µ–¥–µ–Ω–æ: {today_calories:.0f} –∏–∑ {daily_goal} –∫–∫–∞–ª\n"
            
            if remaining > 0:
                progress_message += f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining:.0f} –∫–∫–∞–ª {config.EMOJIS['checkmark']}"
            else:
                over = abs(remaining)
                progress_message += f"–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ: +{over:.0f} –∫–∫–∞–ª {config.EMOJIS['warning']}"
            
            formatted_result += progress_message
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
            context.user_data['last_photo_id'] = photo.file_id
            context.user_data['last_analysis_result'] = result
            context.user_data['preserve_analysis_message'] = True  # –§–ª–∞–≥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–Ω–∞–ª–∏–∑–æ–º
            
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            keyboard = [
                [InlineKeyboardButton(f"{config.EMOJIS['stats']} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
                [InlineKeyboardButton("üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="correct_analysis")],
                [InlineKeyboardButton(f"{config.EMOJIS['food']} –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –±–ª—é–¥–æ", callback_data="add_more")],
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await analyzing_message.edit_text(
                formatted_result,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
            await analyzing_message.edit_text(
                f"{config.EMOJIS['error']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
            )
    
    @staticmethod
    async def stats_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        user = update.effective_user if update.message else update.callback_query.from_user
        
        db_user = DatabaseManager.get_or_create_user(telegram_id=user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é
        stats = DatabaseManager.get_user_stats(db_user.id, days=7)
        
        if not stats:
            message = f"{config.EMOJIS['stats']} **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è**\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø–∏—Ç–∞–Ω–∏–∏.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ!"
        else:
            # –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            today = datetime.now().date()
            today_stat = next((s for s in stats if s.date == today), None)
            
            message = f"{config.EMOJIS['stats']} **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è**\n\n"
            
            if today_stat:
                message += f"**–°–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m')})**\n"
                message += f"{config.EMOJIS['fire']} –ö–∞–ª–æ—Ä–∏–∏: {today_stat.total_calories:.0f} –∏–∑ {db_user.daily_calorie_goal}\n"
                message += f"{config.EMOJIS['muscle']} –ë–µ–ª–∫–∏: {today_stat.total_proteins:.1f}–≥\n"
                message += f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {today_stat.total_carbs:.1f}–≥\n"
                message += f"ü•ë –ñ–∏—Ä—ã: {today_stat.total_fats:.1f}–≥\n"
                message += f"{config.EMOJIS['food']} –ü—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: {today_stat.meals_count}\n\n"
                
                # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏
                progress = (today_stat.total_calories / db_user.daily_calorie_goal) * 100
                if progress <= 100:
                    message += f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏: {progress:.1f}% {config.EMOJIS['checkmark']}\n\n"
                else:
                    message += f"üìä –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–ª–∏: {progress:.1f}% {config.EMOJIS['warning']}\n\n"
            
            # –°—Ä–µ–¥–Ω–∏–µ –∑–∞ –Ω–µ–¥–µ–ª—é
            weekly_avg_calories = sum(s.total_calories for s in stats) / len(stats)
            weekly_total_calories = sum(s.total_calories for s in stats)
            
            message += f"**–ó–∞ –Ω–µ–¥–µ–ª—é (—Å—Ä–µ–¥–Ω–∏–µ –≤ –¥–µ–Ω—å)**\n"
            message += f"{config.EMOJIS['fire']} –ö–∞–ª–æ—Ä–∏–∏: {weekly_avg_calories:.0f}\n"
            message += f"üìà –í—Å–µ–≥–æ –∑–∞ –Ω–µ–¥–µ–ª—é: {weekly_total_calories:.0f} –∫–∫–∞–ª\n"
            message += f"üìÖ –î–Ω–µ–π —Å –∑–∞–ø–∏—Å—è–º–∏: {len(stats)} –∏–∑ 7"
        
        keyboard = [
            [InlineKeyboardButton(f"{config.EMOJIS['chart']} –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_stats")],
            [InlineKeyboardButton(f"{config.EMOJIS['settings']} –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–µ–ª–∏", callback_data="settings")],
            [InlineKeyboardButton(f"{config.EMOJIS['back']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ñ–æ—Ç–æ
        preserve_analysis = context.user_data.get('preserve_analysis_message', False)
        
        if update.callback_query and not preserve_analysis:
            await update.callback_query.edit_message_text(
                message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ callback –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ –∏–ª–∏ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if update.callback_query:
                await update.callback_query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
                bot = update.callback_query.get_bot()
                chat_id = update.callback_query.message.chat_id
                await bot.send_message(
                    chat_id=chat_id,
                    text=message,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=reply_markup
                )
            else:
                await update.message.reply_text(
                    message,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=reply_markup
                )
    
    @staticmethod
    async def settings_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        user = update.effective_user if update.message else update.callback_query.from_user
        db_user = DatabaseManager.get_or_create_user(telegram_id=user.id)
        
        # –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(f"‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} ({db_user.telegram_id}):")
        logger.info(f"   –¶–µ–ª—å –∫–∞–ª–æ—Ä–∏–π: {db_user.daily_calorie_goal}")
        logger.info(f"   –í–µ—Å: {db_user.weight}")
        logger.info(f"   –†–æ—Å—Ç: {db_user.height}")
        logger.info(f"   –í–æ–∑—Ä–∞—Å—Ç: {db_user.age}")
        logger.info(f"   –ü–æ–ª: {db_user.gender}")
        
        message = f"{config.EMOJIS['settings']} **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è**\n\n"
        message += f"**–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
        message += f"üéØ –¶–µ–ª—å –∫–∞–ª–æ—Ä–∏–π –≤ –¥–µ–Ω—å: {db_user.daily_calorie_goal} –∫–∫–∞–ª\n"
        
        if db_user.weight:
            message += f"{config.EMOJIS['scales']} –í–µ—Å: {db_user.weight} –∫–≥\n"
        if db_user.height:
            message += f"üìè –†–æ—Å—Ç: {db_user.height} —Å–º\n"
        if db_user.age:
            message += f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {db_user.age} –ª–µ—Ç\n"
        if db_user.gender:
            message += f"üë§ –ü–æ–ª: {'–º—É–∂—Å–∫–æ–π' if db_user.gender == 'male' else '–∂–µ–Ω—Å–∫–∏–π'}\n"
        
        message += f"\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:"
        
        keyboard = [
            [InlineKeyboardButton("üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å –∫–∞–ª–æ—Ä–∏–π", callback_data="set_calorie_goal")],
            [InlineKeyboardButton(f"{config.EMOJIS['scales']} –û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Å", callback_data="set_weight")],
            [InlineKeyboardButton("üìè –£–∫–∞–∑–∞—Ç—å —Ä–æ—Å—Ç", callback_data="set_height")],
            [InlineKeyboardButton("üë§ –£–∫–∞–∑–∞—Ç—å –ø–æ–ª –∏ –≤–æ–∑—Ä–∞—Å—Ç", callback_data="set_personal_info")],
            [InlineKeyboardButton(f"{config.EMOJIS['back']} –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
    
    @staticmethod
    async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "main_menu":
            await CalorieBotHandlers.start_command(update, context)
        elif query.data == "stats":
            await CalorieBotHandlers.stats_handler(update, context)
        elif query.data == "settings":
            await CalorieBotHandlers.settings_handler(update, context)
        elif query.data == "help":
            await CalorieBotHandlers.help_command(update, context)
        elif query.data == "add_more":
            await query.answer()
            bot = query.get_bot()
            chat_id = query.message.chat_id
            await bot.send_message(
                chat_id=chat_id,
                text=f"{config.EMOJIS['food']} –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–ª—é–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–ª–æ—Ä–∏–π!"
            )
        elif query.data == "detailed_stats":
            await CalorieBotHandlers.detailed_stats_handler(update, context)
        elif query.data.startswith("set_"):
            await CalorieBotHandlers.settings_input_handler(update, context)
        elif query.data == "correct_analysis":
            await CalorieBotHandlers.correction_handler(update, context)
        elif query.data == "cancel_correction":
            context.user_data.pop('waiting_for', None)
            context.user_data.pop('correction_photo_id', None)
            await query.edit_message_text("‚ùå –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        elif query.data == "daily_history":
            await CalorieBotHandlers.daily_history_handler(update, context)
        elif query.data == "weekly_stats_detail":
            await CalorieBotHandlers.weekly_stats_detail_handler(update, context)
        elif query.data == "back_to_profile":
            await CalorieBotHandlers.back_to_profile_handler(update, context)
        elif query.data == "edit_profile":
            await CalorieBotHandlers.settings_handler(update, context)
        elif query.data == "profile":
            await CalorieBotHandlers.profile_callback_handler(update, context)
    
    @staticmethod
    async def detailed_stats_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        user = update.callback_query.from_user
        db_user = DatabaseManager.get_or_create_user(telegram_id=user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –º–µ—Å—è—Ü
        stats = DatabaseManager.get_user_stats(db_user.id, days=30)
        
        if not stats:
            message = f"{config.EMOJIS['chart']} **–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å–∏ –æ –ø–∏—Ç–∞–Ω–∏–∏!"
        else:
            message = f"{config.EMOJIS['chart']} **–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π**\n\n"
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_calories = sum(s.total_calories for s in stats)
            avg_calories = total_calories / len(stats)
            days_with_records = len(stats)
            
            message += f"**–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n"
            message += f"üìä –î–Ω–µ–π —Å –∑–∞–ø–∏—Å—è–º–∏: {days_with_records} –∏–∑ 30\n"
            message += f"üî• –û–±—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {total_calories:.0f} –∫–∫–∞–ª\n"
            message += f"üìà –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {avg_calories:.0f} –∫–∫–∞–ª\n"
            message += f"üéØ –¶–µ–ª—å –≤ –¥–µ–Ω—å: {db_user.daily_calorie_goal} –∫–∫–∞–ª\n\n"
            
            # –ê–Ω–∞–ª–∏–∑ —Å–æ–±–ª—é–¥–µ–Ω–∏—è —Ü–µ–ª–∏
            goal_days = sum(1 for s in stats if s.total_calories <= db_user.daily_calorie_goal)
            goal_percentage = (goal_days / days_with_records) * 100 if days_with_records > 0 else 0
            
            message += f"**–°–æ–±–ª—é–¥–µ–Ω–∏–µ —Ü–µ–ª–∏:**\n"
            message += f"‚úÖ –î–Ω–µ–π –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ü–µ–ª–∏: {goal_days} ({goal_percentage:.1f}%)\n"
            message += f"‚ö†Ô∏è –î–Ω–µ–π —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º: {days_with_records - goal_days}\n\n"
            
            # –ü–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞
            avg_proteins = sum(s.total_proteins for s in stats) / len(stats)
            avg_carbs = sum(s.total_carbs for s in stats) / len(stats)
            avg_fats = sum(s.total_fats for s in stats) / len(stats)
            
            message += f"**–ü–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞ (—Å—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å):**\n"
            message += f"üí™ –ë–µ–ª–∫–∏: {avg_proteins:.1f}–≥\n"
            message += f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {avg_carbs:.1f}–≥\n"
            message += f"ü•ë –ñ–∏—Ä—ã: {avg_fats:.1f}–≥\n"
        
        keyboard = [
            [InlineKeyboardButton(f"{config.EMOJIS['back']} –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="stats")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    @staticmethod
    async def settings_input_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        query = update.callback_query
        setting_type = query.data
        
        if setting_type == "set_calorie_goal":
            message = f"üéØ **–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏ –∫–∞–ª–æ—Ä–∏–π**\n\n–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –≤ –¥–µ–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2000):"
            context.user_data['waiting_for'] = 'calorie_goal'
        elif setting_type == "set_weight":
            message = f"{config.EMOJIS['scales']} **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Å–∞**\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70.5):"
            context.user_data['waiting_for'] = 'weight'
        elif setting_type == "set_height":
            message = f"üìè **–£–∫–∞–∑–∞–Ω–∏–µ —Ä–æ—Å—Ç–∞**\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 175):"
            context.user_data['waiting_for'] = 'height'
        elif setting_type == "set_personal_info":
            message = f"üë§ **–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç –∏ –ø–æ–ª —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25 –º—É–∂—Å–∫–æ–π –∏–ª–∏ 30 –∂–µ–Ω—Å–∫–∏–π):"
            context.user_data['waiting_for'] = 'personal_info'
        
        keyboard = [
            [InlineKeyboardButton(f"{config.EMOJIS['back']} –û—Ç–º–µ–Ω–∞", callback_data="settings")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    @staticmethod
    async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if context.user_data.get('waiting_for') == 'correction':
            await CalorieBotHandlers.process_correction(update, context, text)
        elif context.user_data.get('waiting_for'):
            await CalorieBotHandlers.process_settings_input(update, context, text)
        else:
            # –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.message.reply_text(
                f"{config.EMOJIS['food']} –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–π –µ–¥—ã, –∏ —è –ø–æ—Å—á–∏—Ç–∞—é –∫–∞–ª–æ—Ä–∏–∏!\n\n"
                f"–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏:\n"
                f"/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                f"/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
                f"/help - –ø–æ–º–æ—â—å"
            )
    
    @staticmethod
    async def process_settings_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        user = update.effective_user
        db_user = DatabaseManager.get_or_create_user(telegram_id=user.id)
        waiting_for = context.user_data.get('waiting_for')
        
        success = False
        error_message = ""
        
        try:
            if waiting_for == 'calorie_goal':
                calorie_goal = int(text)
                if 500 <= calorie_goal <= 5000:
                    # –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏ –∫–∞–ª–æ—Ä–∏–π
                    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({db_user.telegram_id}) –º–µ–Ω—è–µ—Ç —Ü–µ–ª—å –∫–∞–ª–æ—Ä–∏–π: {db_user.daily_calorie_goal} ‚Üí {calorie_goal}")
                    updated_user = DatabaseManager.update_user_settings(db_user.id, daily_calorie_goal=calorie_goal)
                    success = True
                    message = f"‚úÖ –¶–µ–ª—å –∫–∞–ª–æ—Ä–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {calorie_goal} –∫–∫–∞–ª –≤ –¥–µ–Ω—å"
                    logger.info(f"‚úÖ –¶–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ë–î: {updated_user.daily_calorie_goal}")
                else:
                    error_message = "–¶–µ–ª—å –∫–∞–ª–æ—Ä–∏–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–∂–¥—É 500 –∏ 5000 –∫–∫–∞–ª"
            
            elif waiting_for == 'weight':
                weight = float(text.replace(',', '.'))
                if 20 <= weight <= 300:
                    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({db_user.telegram_id}) —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–µ—Å: {weight} –∫–≥")
                    updated_user = DatabaseManager.update_user_settings(db_user.id, weight=weight)
                    success = True
                    message = f"‚úÖ –í–µ—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {weight} –∫–≥"
                    logger.info(f"‚úÖ –í–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: {updated_user.weight}")
                else:
                    error_message = "–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 20 –∏ 300 –∫–≥"
            
            elif waiting_for == 'height':
                height = int(text)
                if 100 <= height <= 250:
                    DatabaseManager.update_user_settings(db_user.id, height=height)
                    success = True
                    message = f"‚úÖ –†–æ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {height} —Å–º"
                else:
                    error_message = "–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 100 –∏ 250 —Å–º"
            
            elif waiting_for == 'personal_info':
                parts = text.lower().split()
                if len(parts) >= 2:
                    age = int(parts[0])
                    gender = 'male' if '–º—É–∂' in parts[1] else 'female' if '–∂–µ–Ω' in parts[1] else None
                    
                    if 10 <= age <= 120 and gender:
                        DatabaseManager.update_user_settings(db_user.id, age=age, gender=gender)
                        success = True
                        gender_text = '–º—É–∂—Å–∫–æ–π' if gender == 'male' else '–∂–µ–Ω—Å–∫–∏–π'
                        message = f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {age} –ª–µ—Ç, {gender_text}"
                    else:
                        error_message = "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: –≤–æ–∑—Ä–∞—Å—Ç (10-120) –∏ –ø–æ–ª (–º—É–∂—Å–∫–æ–π/–∂–µ–Ω—Å–∫–∏–π)"
                else:
                    error_message = "–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –∏ –ø–æ–ª —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª"
        
        except ValueError:
            error_message = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        context.user_data.pop('waiting_for', None)
        
        if success:
            keyboard = [
                [InlineKeyboardButton(f"{config.EMOJIS['settings']} –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
                [InlineKeyboardButton(f"{config.EMOJIS['back']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
        else:
            message = f"‚ùå {error_message}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é."
            keyboard = [
                [InlineKeyboardButton(f"{config.EMOJIS['back']} –û—Ç–º–µ–Ω–∞", callback_data="settings")]
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            message,
            reply_markup=reply_markup
        )

    @staticmethod
    async def correction_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞"""
        query = update.callback_query
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
        if 'last_analysis_result' not in context.user_data:
            await query.answer()
            bot = query.get_bot()
            chat_id = query.message.chat_id
            await bot.send_message(
                chat_id=chat_id,
                text="‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏. –ü–æ—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ."
            )
            return
        
        context.user_data['waiting_for'] = 'correction'
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        result = context.user_data['last_analysis_result']
        current_items = "\n".join([
            f"‚Ä¢ {item['name']}: {item.get('estimated_weight', '–≤–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω')}"
            for item in result.get('food_items', [])
        ])
        
        message = f"""
üîß **–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞**

**–¢–µ–∫—É—â–∏–π –∞–Ω–∞–ª–∏–∑:**
{current_items}
**–û–±—â–∏–µ –∫–∞–ª–æ—Ä–∏–∏:** {result.get('total_calories', 0)} –∫–∫–∞–ª

**–ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:**
‚Ä¢ `calories 850` - –∏–∑–º–µ–Ω–∏—Ç—å –æ–±—â–∏–µ –∫–∞–ª–æ—Ä–∏–∏  
‚Ä¢ `–±—É—Ç–µ—Ä–±—Ä–æ–¥—ã 320–≥` - –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ `calories 900`
‚Ä¢ `–±—É—Ç–µ—Ä–±—Ä–æ–¥—ã 320–≥`
‚Ä¢ `–±–ª–∏–Ω—ã 180–≥`

–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
"""
        
        keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_correction")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –∏—Å—Ö–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        await query.answer()
        bot = query.get_bot()
        chat_id = query.message.chat_id
        await bot.send_message(
            chat_id=chat_id,
            text=message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )

    @staticmethod
    async def process_correction(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
        user = update.effective_user
        db_user = DatabaseManager.get_or_create_user(telegram_id=user.id)
        
        try:
            # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –∫–æ—Ä—Ä–µ–∫—Ü–∏—é
            text_lower = text.lower()
            
            if text_lower.startswith('–∫–∞–ª–æ—Ä–∏–∏ '):
                # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –æ–±—â–∏—Ö –∫–∞–ª–æ—Ä–∏–π
                new_calories = int(text.split()[1])
                if 0 <= new_calories <= 5000:
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –≤ –ë–î
                    message = f"‚úÖ –ö–∞–ª–æ—Ä–∏–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã: {new_calories} –∫–∫–∞–ª"
                    success = True
                else:
                    message = "‚ùå –ö–∞–ª–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 5000"
                    success = False
            else:
                # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –≤–µ—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
                parts = text.split()
                if len(parts) >= 2:
                    dish_name = parts[0]
                    new_weight = ' '.join(parts[1:])
                    message = f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {dish_name} - {new_weight}"
                    success = True
                else:
                    message = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: '–±–ª—é–¥–æ –≤–µ—Å' (–Ω–∞–ø—Ä–∏–º–µ—Ä: –±–ª–∏–Ω—ã 180–≥)"
                    success = False
            
        except ValueError:
            message = "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∏—Å–ª–∞"
            success = False
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data.pop('waiting_for', None)
        context.user_data.pop('correction_photo_id', None)
        
        keyboard = [
            [InlineKeyboardButton(f"{config.EMOJIS['stats']} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton(f"{config.EMOJIS['back']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            message,
            reply_markup=reply_markup
        )

    @staticmethod
    async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = update.effective_user
        db_user = DatabaseManager.get_or_create_user(telegram_id=user.id)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        profile_info = DatabaseManager.get_user_info(db_user.id)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤–µ–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
        tracking_days = DatabaseManager.get_tracking_days(db_user.id)
        
        message = f"""
üë§ **–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç**

**–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
üìù –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìä –í–µ–¥—ë—Ç–µ –∑–∞–ø–∏—Å–∏: {tracking_days} –¥–Ω–µ–π
üéØ –¶–µ–ª—å –∫–∞–ª–æ—Ä–∏–π: {db_user.daily_calorie_goal} –∫–∫–∞–ª/–¥–µ–Ω—å

**–§–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**
‚öñÔ∏è –í–µ—Å: {db_user.weight if db_user.weight else '–ù–µ —É–∫–∞–∑–∞–Ω'} –∫–≥
üìè –†–æ—Å—Ç: {db_user.height if db_user.height else '–ù–µ —É–∫–∞–∑–∞–Ω'} —Å–º
üéÇ –í–æ–∑—Ä–∞—Å—Ç: {db_user.age if db_user.age else '–ù–µ —É–∫–∞–∑–∞–Ω'} –ª–µ—Ç
üöª –ü–æ–ª: {db_user.gender if db_user.gender else '–ù–µ —É–∫–∞–∑–∞–Ω'}

**–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üî• –°–µ–≥–æ–¥–Ω—è: {profile_info['today_calories']} / {db_user.daily_calorie_goal} –∫–∫–∞–ª
üìà –ó–∞ –Ω–µ–¥–µ–ª—é: {profile_info['week_avg']:.0f} –∫–∫–∞–ª/–¥–µ–Ω—å (—Å—Ä–µ–¥–Ω–µ–µ)
üìÖ –ó–∞ –º–µ—Å—è—Ü: {profile_info['month_avg']:.0f} –∫–∫–∞–ª/–¥–µ–Ω—å (—Å—Ä–µ–¥–Ω–µ–µ)
"""
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –ò—Å—Ç–æ—Ä–∏—è –ø–æ –¥–Ω—è–º", callback_data="daily_history")],
            [InlineKeyboardButton("üìä –ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="weekly_stats_detail")],
            [InlineKeyboardButton("‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="edit_profile")],
            [InlineKeyboardButton(f"{config.EMOJIS['back']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )

    @staticmethod
    async def profile_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""
        query = update.callback_query
        user = query.from_user
        db_user = DatabaseManager.get_or_create_user(telegram_id=user.id)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        profile_info = DatabaseManager.get_user_info(db_user.id)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤–µ–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
        tracking_days = DatabaseManager.get_tracking_days(db_user.id)
        
        message = f"""
üë§ **–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç**

**–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
üìù –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìä –í–µ–¥—ë—Ç–µ –∑–∞–ø–∏—Å–∏: {tracking_days} –¥–Ω–µ–π
üéØ –¶–µ–ª—å –∫–∞–ª–æ—Ä–∏–π: {db_user.daily_calorie_goal} –∫–∫–∞–ª/–¥–µ–Ω—å

**–§–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**
‚öñÔ∏è –í–µ—Å: {db_user.weight if db_user.weight else '–ù–µ —É–∫–∞–∑–∞–Ω'} –∫–≥
üìè –†–æ—Å—Ç: {db_user.height if db_user.height else '–ù–µ —É–∫–∞–∑–∞–Ω'} —Å–º
üéÇ –í–æ–∑—Ä–∞—Å—Ç: {db_user.age if db_user.age else '–ù–µ —É–∫–∞–∑–∞–Ω'} –ª–µ—Ç
üöª –ü–æ–ª: {db_user.gender if db_user.gender else '–ù–µ —É–∫–∞–∑–∞–Ω'}

**–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üî• –°–µ–≥–æ–¥–Ω—è: {profile_info['today_calories']} / {db_user.daily_calorie_goal} –∫–∫–∞–ª
üìà –ó–∞ –Ω–µ–¥–µ–ª—é: {profile_info['week_avg']:.0f} –∫–∫–∞–ª/–¥–µ–Ω—å (—Å—Ä–µ–¥–Ω–µ–µ)
üìÖ –ó–∞ –º–µ—Å—è—Ü: {profile_info['month_avg']:.0f} –∫–∫–∞–ª/–¥–µ–Ω—å (—Å—Ä–µ–¥–Ω–µ–µ)
"""
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –ò—Å—Ç–æ—Ä–∏—è –ø–æ –¥–Ω—è–º", callback_data="daily_history")],
            [InlineKeyboardButton("üìä –ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="weekly_stats_detail")],
            [InlineKeyboardButton("‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="edit_profile")],
            [InlineKeyboardButton(f"{config.EMOJIS['back']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )

    @staticmethod
    async def daily_history_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–∞–ª–æ—Ä–∏–π –ø–æ –¥–Ω—è–º"""
        query = update.callback_query
        user = query.from_user
        db_user = DatabaseManager.get_or_create_user(telegram_id=user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π
        daily_history = DatabaseManager.get_daily_calorie_history(db_user.id, days=14)
        
        if not daily_history:
            message = f"{config.EMOJIS['warning']} **–ò—Å—Ç–æ—Ä–∏—è –∫–∞–ª–æ—Ä–∏–π**\n\n–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø–∏—Ç–∞–Ω–∏–∏.\n–ù–∞—á–Ω–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ –µ–¥—ã!"
        else:
            message = f"üìÖ **–ò—Å—Ç–æ—Ä–∏—è –∫–∞–ª–æ—Ä–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π)**\n\n"
            
            for entry in daily_history:
                date_str = entry['date'].strftime("%d.%m")
                day_name = entry['date'].strftime("%a")  # —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è
                calories = entry['calories']
                goal = db_user.daily_calorie_goal
                
                # –≠–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
                if calories >= goal * 0.9 and calories <= goal * 1.1:
                    status = "üéØ"  # –±–ª–∏–∑–∫–æ –∫ —Ü–µ–ª–∏
                elif calories < goal * 0.7:
                    status = "üîΩ"  # –º–∞–ª–æ
                elif calories > goal * 1.3:
                    status = "üî∫"  # –º–Ω–æ–≥–æ
                else:
                    status = "üìä"  # –Ω–æ—Ä–º–∞
                
                message += f"{status} **{date_str} ({day_name}):** {calories:.0f} –∫–∫–∞–ª\n"
        
        keyboard = [
            [InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_stats")],
            [InlineKeyboardButton(f"{config.EMOJIS['back']} –ö –ø—Ä–æ—Ñ–∏–ª—é", callback_data="back_to_profile")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )

    @staticmethod
    async def weekly_stats_detail_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        query = update.callback_query
        user = query.from_user
        db_user = DatabaseManager.get_or_create_user(telegram_id=user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 –Ω–µ–¥–µ–ª–∏
        weekly_stats = DatabaseManager.get_weekly_stats(db_user.id)
        
        if not weekly_stats:
            message = f"{config.EMOJIS['warning']} **–ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö.\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–µ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏!"
        else:
            message = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–µ–¥–µ–ª—è–º**\n\n"
            
            for i, week in enumerate(weekly_stats):
                week_num = i + 1
                avg_calories = week['avg_calories']
                days_tracked = week['days_tracked']
                goal = db_user.daily_calorie_goal
                
                # –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Ü–µ–ª–∏
                goal_percent = (avg_calories / goal * 100) if goal > 0 else 0
                
                if goal_percent >= 90 and goal_percent <= 110:
                    status = "üéØ –û—Ç–ª–∏—á–Ω–æ"
                elif goal_percent < 80:
                    status = "üîΩ –ú–∞–ª–æ –∫–∞–ª–æ—Ä–∏–π"
                elif goal_percent > 120:
                    status = "üî∫ –ú–Ω–æ–≥–æ –∫–∞–ª–æ—Ä–∏–π"
                else:
                    status = "üìä –ù–æ—Ä–º–∞"
                
                message += f"**–ù–µ–¥–µ–ª—è {week_num}:**\n"
                message += f"üìà –°—Ä–µ–¥–Ω–µ–µ: {avg_calories:.0f} –∫–∫–∞–ª/–¥–µ–Ω—å ({goal_percent:.0f}%)\n"
                message += f"üìÖ –î–Ω–µ–π —Å –∑–∞–ø–∏—Å—è–º–∏: {days_tracked}/7\n"
                message += f"{status}\n\n"
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –ò—Å—Ç–æ—Ä–∏—è –ø–æ –¥–Ω—è–º", callback_data="daily_history")],
            [InlineKeyboardButton(f"{config.EMOJIS['back']} –ö –ø—Ä–æ—Ñ–∏–ª—é", callback_data="back_to_profile")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )

    @staticmethod
    async def back_to_profile_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Ñ–∏–ª—é"""
        await CalorieBotHandlers.profile_callback_handler(update, context)

class WeeklyStatsScheduler:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, application):
        self.application = application
    
    async def send_weekly_stats(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        
        db = DatabaseManager.SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            from database import User
            users = db.query(User).filter(User.is_active == True).all()
            
            for user in users:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é
                    weekly_stats = DatabaseManager.get_weekly_stats(user.id)
                    
                    if not weekly_stats:
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    current_week = weekly_stats[0] if weekly_stats else None
                    if not current_week:
                        continue
                    
                    avg_calories = current_week['avg_calories']
                    days_tracked = current_week['days_tracked']
                    goal = user.daily_calorie_goal
                    goal_percent = (avg_calories / goal * 100) if goal > 0 else 0
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    if goal_percent >= 90 and goal_percent <= 110:
                        status = "üéØ –û—Ç–ª–∏—á–Ω–æ! –í—ã –±–ª–∏–∑–∫–∏ –∫ —Ü–µ–ª–∏"
                        emoji = "üéâ"
                    elif goal_percent < 80:
                        status = "üîΩ –°—Ç–æ–∏—Ç —É–≤–µ–ª–∏—á–∏—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å"
                        emoji = "üí™"
                    elif goal_percent > 120:
                        status = "üî∫ –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –±—ã—Ç—å —É–º–µ—Ä–µ–Ω–Ω–µ–µ"
                        emoji = "üßò‚Äç‚ôÇÔ∏è"
                    else:
                        status = "üìä –î–µ—Ä–∂–∏—Ç–µ—Å—å –≤ –Ω–æ—Ä–º–µ"
                        emoji = "‚úÖ"
                    
                    message = f"""
{emoji} **–ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏**

**–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:**
üìà –°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {avg_calories:.0f} –∫–∫–∞–ª/–¥–µ–Ω—å
üéØ –í–∞—à–∞ —Ü–µ–ª—å: {goal} –∫–∫–∞–ª/–¥–µ–Ω—å
üìä –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏: {goal_percent:.0f}%
üìÖ –î–Ω–µ–π —Å –∑–∞–ø–∏—Å—è–º–∏: {days_tracked}/7

{status}

**–°–æ–≤–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é:**
{"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!" if 90 <= goal_percent <= 110 else "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∫–∞–ª–æ—Ä–∏—è–º–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!"}

–£–¥–∞—á–∏ –≤ –Ω–æ–≤–æ–π –Ω–µ–¥–µ–ª–µ! üåü
                    """
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await self.application.bot.send_message(
                        chat_id=user.telegram_id,
                        text=message.strip(),
                        parse_mode=ParseMode.MARKDOWN
                    )
                    
                    logger.info(f"–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    await asyncio.sleep(1)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
                    continue
                    
        finally:
            db.close()
        
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def schedule_weekly_stats(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 20:00
        schedule.every().sunday.at("20:00").do(
            lambda: asyncio.create_task(self.send_weekly_stats())
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def run_scheduler():
            while True:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        
        scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
        scheduler_thread.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—É—â–µ–Ω")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    create_tables()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(config.TELEGRAM_BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", CalorieBotHandlers.start_command))
    application.add_handler(CommandHandler("help", CalorieBotHandlers.help_command))
    application.add_handler(CommandHandler("stats", CalorieBotHandlers.stats_handler))
    application.add_handler(CommandHandler("settings", CalorieBotHandlers.settings_handler))
    application.add_handler(CommandHandler("profile", CalorieBotHandlers.profile_command))
    application.add_handler(CommandHandler("fixgoal", CalorieBotHandlers.fix_goal_command))
    application.add_handler(CommandHandler("testai", CalorieBotHandlers.test_ai_command))
    application.add_handler(CommandHandler("debuguser", CalorieBotHandlers.debug_user_command))
    application.add_handler(CommandHandler("resetuser", CalorieBotHandlers.reset_user_command))
    application.add_handler(CommandHandler("debugstats", CalorieBotHandlers.debug_stats_command))
    application.add_handler(CommandHandler("rebuildstats", CalorieBotHandlers.rebuild_stats_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.PHOTO, CalorieBotHandlers.photo_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, CalorieBotHandlers.text_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(CalorieBotHandlers.button_handler))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    scheduler = WeeklyStatsScheduler(application)
    scheduler.schedule_weekly_stats()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º {config.BOT_NAME}...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
