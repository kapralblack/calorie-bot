"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π
"""
import asyncio
import logging
import json
from datetime import datetime, timedelta, timezone
import schedule
import threading
import time
from io import BytesIO

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from telegram.constants import ParseMode

import config
from database import DatabaseManager, create_tables
from ai_analyzer import analyzer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class CalorieBotHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞"""
    
    @staticmethod
    def get_main_keyboard():
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        keyboard = [
            [
                KeyboardButton("üçΩÔ∏è –ê–Ω–∞–ª–∏–∑ –µ–¥—ã"),
                KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            ],
            [
                KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
                KeyboardButton("üìÖ –ò—Å—Ç–æ—Ä–∏—è")
            ],
            [
                KeyboardButton("‚ùì –ü–æ–º–æ—â—å"),
                KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            ]
        ]
        return ReplyKeyboardMarkup(
            keyboard, 
            resize_keyboard=True, 
            one_time_keyboard=False,
            input_field_placeholder="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
        )
    
    @staticmethod
    async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–æ–º"""
        user = update.effective_user
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        context.user_data.pop('preserve_analysis_message', None)
        
        telegram_user = DatabaseManager.get_or_create_user(
            telegram_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
        if not DatabaseManager.is_onboarding_completed(user.id):
            await CalorieBotHandlers.start_onboarding(update, context)
            return
        
        # –ï—Å–ª–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é
        # –ü–æ–ª—É—á–∞–µ–º –±—ã—Å—Ç—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        today_calories = DatabaseManager.get_today_calories(telegram_user.id)
        daily_goal = telegram_user.daily_calorie_goal
        
        # –°—Ç–∞—Ç—É—Å –¥–Ω—è
        progress_emoji = "üü¢" if today_calories < daily_goal else "üî¥" if today_calories > daily_goal * 1.1 else "üü°"
        progress_text = f"{today_calories:.0f} / {daily_goal} –∫–∫–∞–ª {progress_emoji}"
        
        welcome_message = f"""
üçé **{config.BOT_NAME}**
        
üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, **{user.first_name}**! 

üìä **–°–µ–≥–æ–¥–Ω—è:** {progress_text}
üí° **–°–æ–≤–µ—Ç:** –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–ª–æ—Ä–∏–π

üî• **–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≥–æ—Ç–æ–≤:**
‚Ä¢ üì∏ AI –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –µ–¥—ã —Å —É—á–µ—Ç–æ–º –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π
‚Ä¢ üìà –£–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è
‚Ä¢ üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {daily_goal} –∫–∫–∞–ª/–¥–µ–Ω—å
‚Ä¢ üì± –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã:
"""
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–º–µ—Å—Ç–æ inline –∫–Ω–æ–ø–æ–∫
        reply_markup = CalorieBotHandlers.get_main_keyboard()
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ callback query –∏–ª–∏ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.callback_query:
            # –≠—Ç–æ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await update.callback_query.message.reply_text(
                welcome_message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
        else:
            # –≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /start
            await update.message.reply_text(
                welcome_message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
    
    @staticmethod 
    async def fix_goal_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–ª–∏ –∫–∞–ª–æ—Ä–∏–π"""
        user = update.effective_user
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª—å 3000 –∫–∫–∞–ª
        success = DatabaseManager.force_update_user_goal(user.id, 3000)
        
        if success:
            message = f"‚úÖ **–¶–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!**\n\n–í–∞—à–∞ –Ω–æ–≤–∞—è —Ü–µ–ª—å: **3000 –∫–∫–∞–ª –≤ –¥–µ–Ω—å**\n\n–¢–µ–ø–µ—Ä—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ!"
        else:
            message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        
        await update.message.reply_text(
            message,
            parse_mode=ParseMode.MARKDOWN
        )
    
    @staticmethod
    async def test_ai_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ OpenAI API"""
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
        if config.ADMIN_USER_ID and str(user.id) != config.ADMIN_USER_ID:
            await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            return
        
        await update.message.reply_text("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º OpenAI API...")
        
        try:
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            from ai_analyzer import analyzer
            test_response = analyzer.client.chat.completions.create(
                model=config.AI_MODEL,
                messages=[{"role": "user", "content": "–û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: '—Ä–∞–±–æ—Ç–∞—é'"}],
                max_tokens=10
            )
            
            ai_response = test_response.choices[0].message.content
            await update.message.reply_text(f"‚úÖ OpenAI API —Ä–∞–±–æ—Ç–∞–µ—Ç: {ai_response}")
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ OpenAI API: {str(e)}")
            import traceback
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è OpenAI: {traceback.format_exc()}")

    @staticmethod
    async def debug_user_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /debuguser - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        user = update.effective_user
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_user = DatabaseManager.get_or_create_user(telegram_id=user.id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            tracking_days = DatabaseManager.get_tracking_days(db_user.id)
            today_calories = DatabaseManager.get_today_calories(db_user.id)
            
            message = f"""
üîç **–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**

üë§ **–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**
‚Ä¢ Telegram ID: `{user.id}`
‚Ä¢ ID –≤ –ë–î: `{db_user.id}`
‚Ä¢ –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:**
‚Ä¢ –¶–µ–ª—å –∫–∞–ª–æ—Ä–∏–π: {db_user.daily_calorie_goal} –∫–∫–∞–ª/–¥–µ–Ω—å
‚Ä¢ –í–µ—Å: {db_user.weight or '–ù–µ —É–∫–∞–∑–∞–Ω'} {' –∫–≥' if db_user.weight else ''}
‚Ä¢ –†–æ—Å—Ç: {db_user.height or '–ù–µ —É–∫–∞–∑–∞–Ω'} {' —Å–º' if db_user.height else ''}
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {db_user.age or '–ù–µ —É–∫–∞–∑–∞–Ω'} {' –ª–µ—Ç' if db_user.age else ''}
‚Ä¢ –ü–æ–ª: {('–º—É–∂—Å–∫–æ–π' if db_user.gender == 'male' else '–∂–µ–Ω—Å–∫–∏–π') if db_user.gender else '–ù–µ —É–∫–∞–∑–∞–Ω'}

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –î–Ω–µ–π —Å –∑–∞–ø–∏—Å—è–º–∏: {tracking_days}
‚Ä¢ –ö–∞–ª–æ—Ä–∏–π —Å–µ–≥–æ–¥–Ω—è: {today_calories:.1f}
‚Ä¢ –°–æ–∑–¥–∞–Ω: {db_user.created_at.strftime('%d.%m.%Y %H:%M') if db_user.created_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}

üîß **For fixing data use:**
/fixgoal - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å 3000 –∫–∫–∞–ª
‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
"""
            
            await update.message.reply_text(
                message, 
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")

    @staticmethod 
    async def reset_user_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /resetuser - –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        user = update.effective_user
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_user = DatabaseManager.get_or_create_user(telegram_id=user.id)
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
            updated_user = DatabaseManager.update_user_settings(
                db_user.id,
                daily_calorie_goal=2000,
                weight=None,
                height=None,
                age=None,
                gender=None
            )
            
            logger.info(f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —Å–±—Ä–æ—à–µ–Ω –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º")
            
            await update.message.reply_text(
                f"""
üîÑ **–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã**

–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –∫ –∏—Å—Ö–æ–¥–Ω—ã–º:
‚Ä¢ –¶–µ–ª—å –∫–∞–ª–æ—Ä–∏–π: 2000 –∫–∫–∞–ª/–¥–µ–Ω—å  
‚Ä¢ –§–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: —Å–±—Ä–æ—à–µ–Ω—ã

–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–Ω–æ–≤–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑:
‚öôÔ∏è /settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
üéØ /fixgoal - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å 3000 –∫–∫–∞–ª
""", 
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞: {e}")

    @staticmethod 
    async def debug_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /debugstats - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∞–±–ª–∏—Ü DailyStats –∏ FoodEntry"""
        user = update.effective_user
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_user = DatabaseManager.get_or_create_user(telegram_id=user.id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º FoodEntry
            from database import SessionLocal, FoodEntry, DailyStats
            from sqlalchemy import func
            
            db = SessionLocal()
            try:
                # –°—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ FoodEntry
                food_entries_count = db.query(func.count(FoodEntry.id)).filter(
                    FoodEntry.user_id == db_user.id
                ).scalar()
                
                # –°—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ DailyStats
                daily_stats_count = db.query(func.count(DailyStats.id)).filter(
                    DailyStats.user_id == db_user.id
                ).scalar()
                
                # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–ø–∏—Å–∏ FoodEntry
                recent_food_entries = db.query(FoodEntry).filter(
                    FoodEntry.user_id == db_user.id
                ).order_by(FoodEntry.created_at.desc()).limit(3).all()
                
                # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–ø–∏—Å–∏ DailyStats
                recent_daily_stats = db.query(DailyStats).filter(
                    DailyStats.user_id == db_user.id
                ).order_by(DailyStats.date.desc()).limit(3).all()
                
            finally:
                db.close()
            
            message = f"""
üîç **–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö**

üìä **–¢–∞–±–ª–∏—Ü–∞ FoodEntry (–∑–∞–ø–∏—Å–∏ –æ –µ–¥–µ):**
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {food_entries_count}

üìà **–¢–∞–±–ª–∏—Ü–∞ DailyStats (–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞):**  
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {daily_stats_count}

üïê **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ FoodEntry:**
"""
            
            for entry in recent_food_entries:
                message += f"‚Ä¢ {entry.created_at.strftime('%d.%m %H:%M')}: {entry.total_calories:.1f} –∫–∫–∞–ª\n"
            
            message += "\nüìÖ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ DailyStats:**\n"
            
            for stat in recent_daily_stats:
                message += f"‚Ä¢ {stat.date.strftime('%d.%m')}: {stat.total_calories:.1f} –∫–∫–∞–ª ({stat.meals_count} –±–ª—é–¥)\n"
            
            if food_entries_count > 0 and daily_stats_count == 0:
                message += "\n‚ö†Ô∏è **–ü–†–û–ë–õ–ï–ú–ê:** –ï—Å—Ç—å –∑–∞–ø–∏—Å–∏ –µ–¥—ã, –Ω–æ –Ω–µ—Ç –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!"
            
            await update.message.reply_text(
                message, 
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ç–∞–±–ª–∏—Ü: {e}")
            import traceback
            logger.error(f"–û—à–∏–±–∫–∞ debug_stats: {traceback.format_exc()}")

    @staticmethod 
    async def rebuild_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /rebuildstats - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ DailyStats –∏–∑ FoodEntry"""
        user = update.effective_user
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_user = DatabaseManager.get_or_create_user(telegram_id=user.id)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã –∏–∑ FoodEntry
            from database import SessionLocal, FoodEntry
            from sqlalchemy import func
            
            db = SessionLocal()
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                unique_dates = db.query(
                    func.date(FoodEntry.created_at).label('date')
                ).filter(
                    FoodEntry.user_id == db_user.id
                ).distinct().all()
                
            finally:
                db.close()
            
            if not unique_dates:
                await update.message.reply_text("üìä –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
                return
            
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã
            rebuilt_count = 0
            for date_row in unique_dates:
                date = date_row.date
                DatabaseManager._update_daily_stats(db_user.id, date)
                rebuilt_count += 1
            
            message = f"""
‚úÖ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞!**

üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–∞—Ç: {rebuilt_count}
üîÑ –í—Å–µ –∑–∞–ø–∏—Å–∏ DailyStats –æ–±–Ω–æ–≤–ª–µ–Ω—ã

–¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:
üìà –ö–Ω–æ–ø–∫—É "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" - –¥–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ  
üîç /debugstats - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã
"""
            
            await update.message.reply_text(
                message, 
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            import traceback
            logger.error(f"–û—à–∏–±–∫–∞ rebuild_stats: {traceback.format_exc()}")

    # ======= ADMIN COMMANDS =======
    @staticmethod
    def is_admin(user_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
        if not config.ADMIN_USER_ID:
            return False
        try:
            return str(user_id) == config.ADMIN_USER_ID
        except:
            return False

    @staticmethod
    async def admin_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /adminstats - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–æ—Ç—É"""
        user = update.effective_user
        
        if not CalorieBotHandlers.is_admin(user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        try:
            stats = DatabaseManager.get_admin_stats()
            
            message = f"""
üëë <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</b>
üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {stats['total_users']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: {stats['active_users_7d']}
‚Ä¢ –° –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ —Ü–µ–ª—è–º–∏: {stats['configured_users']}

üì± <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –æ –µ–¥–µ: {stats['total_food_entries']}
‚Ä¢ –ó–∞–ø–∏—Å–µ–π —Å–µ–≥–æ–¥–Ω—è: {stats['today_entries']}

üèÜ <b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>
"""
            
            for i, user in enumerate(stats['top_users'], 1):
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                name_safe = user['name'].replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
                message += f"{i}. {name_safe} - {user['entries_count']} –∑–∞–ø–∏—Å–µ–π\n"
            
            if not stats['top_users']:
                message += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            
            message += f"""

üîß <b>–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/adminusers - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/adminuser [ID] - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
/adminexport - —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
"""
            
            await update.message.reply_text(
                message, 
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    @staticmethod
    async def admin_users_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /adminusers - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        user = update.effective_user
        
        if not CalorieBotHandlers.is_admin(user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        try:
            users = DatabaseManager.get_all_users_summary()
            
            if not users:
                await update.message.reply_text("üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç")
                return
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –≤–º–µ—Å—Ç–æ Markdown –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            message = f"üë• <b>–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(users)}):</b>\n\n"
            
            for i, user_info in enumerate(users[:15], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö 15
                name = user_info['name']
                username = f"@{user_info['username']}" if user_info['username'] else '–Ω–µ—Ç username'
                entries = user_info['entries_count']
                goal = user_info['daily_calorie_goal']
                
                # –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                if user_info['last_activity']:
                    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ last_activity –∏–º–µ–µ—Ç timezone info
                    last_activity = user_info['last_activity']
                    if last_activity.tzinfo is None:
                        # –ï—Å–ª–∏ –Ω–µ—Ç timezone, –¥–æ–±–∞–≤–ª—è–µ–º UTC
                        last_activity = last_activity.replace(tzinfo=timezone.utc)
                    
                    days_ago = (datetime.now(timezone.utc) - last_activity).days
                    activity = f"{days_ago}–¥ –Ω–∞–∑–∞–¥" if days_ago > 0 else "—Å–µ–≥–æ–¥–Ω—è"
                else:
                    activity = "–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
                
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã
                name_escaped = name.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
                username_escaped = username.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
                
                message += f"{i}. <b>{name_escaped}</b> ({username_escaped})\n"
                message += f"   ID: <code>{user_info['telegram_id']}</code> ‚Ä¢ {entries} –∑–∞–ø–∏—Å–µ–π ‚Ä¢ —Ü–µ–ª—å {goal} –∫–∫–∞–ª\n"
                message += f"   –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity}\n\n"
            
            if len(users) > 15:
                message += f"... –∏ –µ—â–µ {len(users) - 15} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
            
            message += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /adminuser [ID] –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
            
            await update.message.reply_text(
                message, 
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

    @staticmethod
    async def admin_user_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /adminuser [telegram_id] - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        user = update.effective_user
        
        if not CalorieBotHandlers.is_admin(user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        if not context.args:
            await update.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /adminuser [telegram_id]")
            return
        
        try:
            telegram_id = int(context.args[0])
            user_info = DatabaseManager.get_user_detailed_info(telegram_id)
            
            if not user_info:
                await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            user_obj = user_info['user']
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ HTML
            name_safe = (user_obj.first_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ').replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
            username_safe = (user_obj.username or '–Ω–µ—Ç').replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
            
            message = f"""
üîç <b>–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>

üë§ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>
‚Ä¢ –ò–º—è: {name_safe}
‚Ä¢ Username: @{username_safe}
‚Ä¢ Telegram ID: <code>{user_obj.telegram_id}</code>
‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_obj.created_at.strftime('%d.%m.%Y %H:%M')}

‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –¶–µ–ª—å –∫–∞–ª–æ—Ä–∏–π: {user_obj.daily_calorie_goal} –∫–∫–∞–ª/–¥–µ–Ω—å
‚Ä¢ –í–µ—Å: {user_obj.weight or '–Ω–µ —É–∫–∞–∑–∞–Ω'} {'–∫–≥' if user_obj.weight else ''}
‚Ä¢ –†–æ—Å—Ç: {user_obj.height or '–Ω–µ —É–∫–∞–∑–∞–Ω'} {'—Å–º' if user_obj.height else ''}
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {user_obj.age or '–Ω–µ —É–∫–∞–∑–∞–Ω'} {'–ª–µ—Ç' if user_obj.age else ''}
‚Ä¢ –ü–æ–ª: {('–º—É–∂—Å–∫–æ–π' if user_obj.gender == 'male' else '–∂–µ–Ω—Å–∫–∏–π') if user_obj.gender else '–Ω–µ —É–∫–∞–∑–∞–Ω'}

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {user_info['total_entries']}
‚Ä¢ –î–Ω–µ–π —Å –∑–∞–ø–∏—Å—è–º–∏: {user_info['unique_days']}
‚Ä¢ –í—Å–µ–≥–æ –∫–∞–ª–æ—Ä–∏–π: {user_info['total_calories']:.0f} –∫–∫–∞–ª
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {user_info['avg_calories_per_day']:.0f} –∫–∫–∞–ª

üïí <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:</b>
"""
            
            for entry in user_info['recent_entries']:
                date_str = entry['created_at'].strftime('%d.%m %H:%M')
                confidence_emoji = "üü¢" if entry['confidence'] > 80 else "üü°" if entry['confidence'] > 60 else "üî¥"
                message += f"‚Ä¢ {date_str}: {entry['calories']:.0f} –∫–∫–∞–ª {confidence_emoji}\n"
            
            if not user_info['recent_entries']:
                message += "–ó–∞–ø–∏—Å–µ–π –Ω–µ—Ç\n"
            
            await update.message.reply_text(
                message, 
                parse_mode=ParseMode.HTML
            )
            
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")

    @staticmethod
    async def admin_export_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /adminexport - —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV —Ñ–æ—Ä–º–∞—Ç–µ"""
        user = update.effective_user
        
        if not CalorieBotHandlers.is_admin(user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        try:
            users = DatabaseManager.get_all_users_summary()
            
            if not users:
                await update.message.reply_text("üìù –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                return
            
            # –°–æ–∑–¥–∞–µ–º CSV –¥–∞–Ω–Ω—ã–µ
            import io
            import csv
            
            csv_data = io.StringIO()
            writer = csv.writer(csv_data)
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            writer.writerow([
                'Telegram ID', '–ò–º—è', 'Username', '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
                '–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π', '–¶–µ–ª—å –∫–∞–ª–æ—Ä–∏–π',
                '–í–µ—Å', '–†–æ—Å—Ç', '–í–æ–∑—Ä–∞—Å—Ç', '–ü–æ–ª'
            ])
            
            # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for user_info in users:
                writer.writerow([
                    user_info['telegram_id'],
                    user_info['name'],
                    user_info['username'] or '',
                    user_info['created_at'].strftime('%Y-%m-%d %H:%M:%S') if user_info['created_at'] else '',
                    user_info['last_activity'].strftime('%Y-%m-%d %H:%M:%S') if user_info['last_activity'] else '',
                    user_info['entries_count'],
                    user_info['daily_calorie_goal'],
                    user_info['weight'] or '',
                    user_info['height'] or '',
                    user_info['age'] or '',
                    user_info['gender'] or ''
                ])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            csv_content = csv_data.getvalue().encode('utf-8')
            
            filename = f"users_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            
            await update.message.reply_document(
                document=io.BytesIO(csv_content),
                filename=filename,
                caption=f"üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\nüìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            import traceback
            logger.error(f"–û—à–∏–±–∫–∞ admin_export: {traceback.format_exc()}")

    @staticmethod
    async def admin_test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /admintest - –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
        user = update.effective_user
        
        if not CalorieBotHandlers.is_admin(user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        # –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        message = f"""üß™ –¢–ï–°–¢ –ê–î–ú–ò–ù–°–ö–û–ô –ü–ê–ù–ï–õ–ò

‚úÖ –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω!
üë§ –í–∞—à ID: {user.id}
üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

üîß –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç:
‚Ä¢ /adminstats - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ /adminusers - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π  
‚Ä¢ /adminuser [ID] - –∏–Ω—Ñ–æ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
‚Ä¢ /adminexport - —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö

‚ú® –í—Å–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!"""
        
        await update.message.reply_text(message)

    @staticmethod
    async def force_migration_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è telegram_id –¥–ª—è /forcemigration"""
        if not CalorieBotHandlers.is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
            return
            
        try:
            await update.message.reply_text("üîß –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é...")
            
            from database import migrate_telegram_id_if_needed
            migrate_telegram_id_if_needed()
            
            await update.message.reply_text("‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")

    @staticmethod
    async def debug_migration_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /debugmigration –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        if not CalorieBotHandlers.is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
            return
            
        try:
            import logging
            from database import engine, User
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø telegram_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            with engine.connect() as connection:
                result = connection.execute(text("""
                    SELECT data_type, is_nullable, column_default
                    FROM information_schema.columns 
                    WHERE table_name = 'users' 
                    AND column_name = 'telegram_id'
                """))
                
                row = result.fetchone()
                if row:
                    data_type, is_nullable, column_default = row
                    status = f"""
üîç **–°–¢–ê–¢–£–° –ú–ò–ì–†–ê–¶–ò–ò telegram_id**

üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª–µ:**
‚Ä¢ –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: `{data_type}`
‚Ä¢ Nullable: {is_nullable}
‚Ä¢ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: {column_default or 'NULL'}

{'‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –í–´–ü–û–õ–ù–ï–ù–ê - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –ª—é–±—ã–µ Telegram ID' if data_type == 'bigint' else '‚ùå –ú–ò–ì–†–ê–¶–ò–Ø –ù–ï –í–´–ü–û–õ–ù–ï–ù–ê - –±–æ–ª—å—à–∏–µ Telegram ID –±—É–¥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏'}

üéØ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
{'''‚Ä¢ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü—Ä–æ–±–ª–µ–º—ã —Ä–µ—à–µ–Ω—ã.''' if data_type == 'bigint' else '''‚Ä¢ –¢–†–ï–ë–£–ï–¢–°–Ø –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –º–∏–≥—Ä–∞—Ü–∏—é
‚Ä¢ –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'''}
"""
                else:
                    status = "‚ùå –¢–∞–±–ª–∏—Ü–∞ users –∏–ª–∏ –ø–æ–ª–µ telegram_id –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–æ–ª—å—à–∏–º ID  
            test_large_id = 9876543210  # –ë–æ–ª—å—à–æ–π ID –¥–ª—è —Ç–µ—Å—Ç–∞
            try:
                from database import DatabaseManager
                test_user = DatabaseManager.get_or_create_user(
                    telegram_id=test_large_id, 
                    username="test_large_id",
                    first_name="TestUser"
                )
                
                if hasattr(test_user, 'id') and test_user.id is not None:
                    test_result = "‚úÖ –ë–æ–ª—å—à–∏–µ Telegram ID –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è"
                    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    try:
                        from database import SessionLocal
                        db = SessionLocal()
                        real_test_user = db.query(User).filter(User.telegram_id == test_large_id).first()
                        if real_test_user:
                            db.delete(real_test_user)
                            db.commit()
                        db.close()
                    except:
                        pass
                else:
                    test_result = "‚ö†Ô∏è –ë–æ–ª—å—à–∏–µ Telegram ID —Å–æ–∑–¥–∞—é—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                    
            except Exception as test_error:
                test_result = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ –±–æ–ª—å—à–æ–≥–æ ID: {test_error}"
            
            status += f"\n\nüß™ **–¢–µ—Å—Ç –±–æ–ª—å—à–∏—Ö Telegram ID:**\n{test_result}"
            
            await update.message.reply_text(status, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")

    @staticmethod
    async def admin_debug_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /admindebug - –æ—Ç–ª–∞–¥–∫–∞ timezone –ø—Ä–æ–±–ª–µ–º"""
        user = update.effective_user
        
        if not CalorieBotHandlers.is_admin(user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        try:
            users = DatabaseManager.get_all_users_summary()
            
            if not users:
                await update.message.reply_text("üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏")
                return
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            user_info = users[0]
            
            message = f"""üîß –û–¢–õ–ê–î–ö–ê TIMEZONE

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info['name']}
üÜî ID: {user_info['telegram_id']}

üìÖ created_at: {user_info['created_at']}
   timezone: {user_info['created_at'].tzinfo if user_info['created_at'] else 'None'}

üïê last_activity: {user_info['last_activity']}
   timezone: {user_info['last_activity'].tzinfo if user_info['last_activity'] else 'None'}

‚è∞ datetime.now(timezone.utc): {datetime.now(timezone.utc)}

‚úÖ –¢–µ—Å—Ç –≤—ã—á–∏—Ç–∞–Ω–∏—è:"""
            
            # –¢–µ—Å—Ç –≤—ã—á–∏—Ç–∞–Ω–∏—è
            try:
                if user_info['last_activity']:
                    days_diff = (datetime.now(timezone.utc) - user_info['last_activity']).days
                    message += f"\n   {days_diff} –¥–Ω–µ–π –Ω–∞–∑–∞–¥ - ‚úÖ OK"
                else:
                    message += f"\n   last_activity = None - ‚úÖ OK"
            except Exception as e:
                message += f"\n   –û–®–ò–ë–ö–ê: {e} - ‚ùå FAIL"
            
            await update.message.reply_text(message)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}")

    @staticmethod
    async def admin_db_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /admindb - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        user = update.effective_user
        
        if not CalorieBotHandlers.is_admin(user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        try:
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db_type = "PostgreSQL" if config.DATABASE_URL.startswith('postgresql') else \
                     "SQLite" if config.DATABASE_URL.startswith('sqlite') else "–î—Ä—É–≥–∞—è"
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ URL (–±–µ–∑ –ø–∞—Ä–æ–ª—è)
            if '@' in config.DATABASE_URL:
                safe_url = config.DATABASE_URL.split('@')[1]
                db_info = f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ...@{safe_url}"
            else:
                db_info = f"URL: {config.DATABASE_URL[:30]}..."
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            stats = DatabaseManager.get_admin_stats()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Ç–µ—Ä—é –¥–∞–Ω–Ω—ã—Ö
            persistent_warning = ""
            if db_type == "SQLite":
                persistent_warning = """
‚ö†Ô∏è –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö!
‚ùå –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –°–ë–†–ê–°–´–í–ê–¢–¨–°–Ø –ø—Ä–∏ –∫–∞–∂–¥–æ–º –¥–µ–ø–ª–æ–µ
üí° –ù–∞—Å—Ç—Ä–æ–π—Ç–µ PostgreSQL –≤ Railway –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è

üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:
1. –í Railway: Add Service ‚Üí Database ‚Üí PostgreSQL
2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ Postgres Connection URL  
3. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é DATABASE_URL –≤ –±–æ—Ç-—Å–µ—Ä–≤–∏—Å–µ
4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç"""
            else:
                persistent_warning = "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö - –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è!"
            
            message = f"""üíæ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</b>

üîß <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b>
‚Ä¢ –¢–∏–ø: {db_type}
‚Ä¢ {db_info}

üìä <b>–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:</b>
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
‚Ä¢ –ó–∞–ø–∏—Å–µ–π –æ –µ–¥–µ: {stats['total_food_entries']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats['active_users_7d']}

{persistent_warning}

üîç <b>–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/debugstats - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ë–î
/rebuildstats - –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/adminexport - —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV"""
            
            await update.message.reply_text(
                message, 
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ë–î: {e}")

    @staticmethod
    async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = update.effective_user
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_user = DatabaseManager.get_or_create_user(telegram_id=user.id)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db_type = "PostgreSQL" if config.DATABASE_URL.startswith('postgresql') else \
                     "SQLite" if config.DATABASE_URL.startswith('sqlite') else "–î—Ä—É–≥–∞—è"
            
            persistent = "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏" if db_type == "PostgreSQL" else \
                        "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –±–æ—Ç–∞"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            tracking_days = DatabaseManager.get_tracking_days(db_user.id)
            today_calories = DatabaseManager.get_today_calories(db_user.id)
            
            # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
            created_date = db_user.created_at.strftime('%d.%m.%Y') if db_user.created_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            message = f"""üìä <b>–°—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö</b>

üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å:</b>
‚Ä¢ –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {created_date}
‚Ä¢ –¶–µ–ª—å –∫–∞–ª–æ—Ä–∏–π: {db_user.daily_calorie_goal} –∫–∫–∞–ª/–¥–µ–Ω—å

üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –î–Ω–µ–π —Å –∑–∞–ø–∏—Å—è–º–∏: {tracking_days}
‚Ä¢ –ö–∞–ª–æ—Ä–∏–π —Å–µ–≥–æ–¥–Ω—è: {today_calories:.0f}
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å: {'‚úÖ –î–∞' if (db_user.weight or db_user.height) else '‚öôÔ∏è –ù–µ—Ç (–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤ /settings)'}

üíæ <b>–•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:</b>
‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_type}
‚Ä¢ {persistent}

üí° <b>–ß—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç:</b>
{'''‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏! 
   –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –±–æ—Ç–∞''' if db_type == "PostgreSQL" else 
'''‚ö†Ô∏è –ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –±–æ—Ç–∞ –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç —Å–±—Ä–æ—Å–∏—Ç—å—Å—è
   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å PostgreSQL'''}

üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
            
            await update.message.reply_text(
                message, 
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

    # ======= –ù–û–í–´–ï UI –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =======
    
    @staticmethod
    async def photo_tip_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ" - –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ"""
        query = update.callback_query
        
        message = f"""üì∏ **–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞**

üéØ **–ü—Ä–æ—Å—Ç—ã–µ —à–∞–≥–∏:**
1. –ù–∞–∂–º–∏—Ç–µ üìé (—Å–∫—Ä–µ–ø–∫–∞) –≤ —á–∞—Ç–µ
2. –í—ã–±–µ—Ä–∏—Ç–µ "–ö–∞–º–µ—Ä–∞" –∏–ª–∏ "–§–æ—Ç–æ"
3. –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –µ–¥—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏
4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–æ—Ç—É

üí° **–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:**
‚Ä¢ üìè –ü–æ–∫–∞–∂–∏—Ç–µ –µ–¥—É —Ü–µ–ª–∏–∫–æ–º –Ω–∞ —Ç–∞—Ä–µ–ª–∫–µ
‚Ä¢ üí° –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç AI
‚Ä¢ ü•Ñ –†–∞–∑–º–µ—Å—Ç–∏—Ç–µ –ª–æ–∂–∫—É/–≤–∏–ª–∫—É –¥–ª—è –º–∞—Å—à—Ç–∞–±–∞
‚Ä¢ üçΩÔ∏è –û–¥–∏–Ω –ø—Ä–∏–µ–º –ø–∏—â–∏ = –æ–¥–Ω–æ —Ñ–æ—Ç–æ

‚ú® **–ß—Ç–æ —è –æ–ø—Ä–µ–¥–µ–ª—é:**
‚Ä¢ –í–∏–¥—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏, –±–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã  
‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–π –∏ –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–æ–≤

üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"""

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if query:
            # –≠—Ç–æ callback query - –∏—Å–ø–æ–ª—å–∑—É–µ–º inline –∫–Ω–æ–ø–∫–∏
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
        else:
            # –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            reply_markup = CalorieBotHandlers.get_main_keyboard()
            await update.message.reply_text(
                message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )

    @staticmethod  
    async def my_goal_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ—è —Ü–µ–ª—å" - –±—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ü–µ–ª–∏ –∫–∞–ª–æ—Ä–∏–π"""
        query = update.callback_query
        user = query.from_user
        
        try:
            db_user = DatabaseManager.get_or_create_user(telegram_id=user.id)
            today_calories = DatabaseManager.get_today_calories(db_user.id)
            daily_goal = db_user.daily_calorie_goal
            
            # –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress_percent = (today_calories / daily_goal * 100) if daily_goal > 0 else 0
            remaining = daily_goal - today_calories
            
            # –≠–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
            if remaining > 0:
                status_emoji = "üü¢" if remaining > daily_goal * 0.2 else "üü°"
                status_text = f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining:.0f} –∫–∫–∞–ª"
            else:
                over = abs(remaining)
                status_emoji = "üî¥" if over > daily_goal * 0.1 else "üü°"
                status_text = f"–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ: +{over:.0f} –∫–∫–∞–ª"
            
            message = f"""üéØ **–í–∞—à–∞ —Ü–µ–ª—å –∫–∞–ª–æ—Ä–∏–π**

üë§ **{user.first_name}**

üìä **–°–µ–≥–æ–¥–Ω—è:** {today_calories:.0f} / {daily_goal} –∫–∫–∞–ª
üìà **–ü—Ä–æ–≥—Ä–µ—Å—Å:** {progress_percent:.1f}% {status_emoji}
‚öñÔ∏è **{status_text}**

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
{'''üçΩÔ∏è –ú–æ–∂–µ—Ç–µ –µ—â–µ –ø–æ–µ—Å—Ç—å - –¥–æ—Å—Ç–∏–≥–∞–π—Ç–µ —Ü–µ–ª–∏!''' if remaining > 0 else 
'''ü•ó –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ª–µ–≥–∫–∏–π —É–∂–∏–Ω –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å –∫–∞–ª–æ—Ä–∏–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞''' if remaining < -200 else 
'''‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –±–ª–∏–∑–∫–æ –∫ —Ü–µ–ª–∏'''}

üîß –•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"""

            keyboard = [
                [InlineKeyboardButton("‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å", callback_data="set_calorie_goal")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–ª–∏: {e}")

    @staticmethod
    async def data_status_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç—É—Å –¥–∞–Ω–Ω—ã—Ö" - callback –≤–µ—Ä—Å–∏—è status_command"""
        query = update.callback_query
        user = query.from_user
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_user = DatabaseManager.get_or_create_user(telegram_id=user.id)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db_type = "PostgreSQL" if config.DATABASE_URL.startswith('postgresql') else \
                     "SQLite" if config.DATABASE_URL.startswith('sqlite') else "–î—Ä—É–≥–∞—è"
            
            persistent = "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏" if db_type == "PostgreSQL" else \
                        "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –±–æ—Ç–∞"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            tracking_days = DatabaseManager.get_tracking_days(db_user.id)
            today_calories = DatabaseManager.get_today_calories(db_user.id)
            
            # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
            created_date = db_user.created_at.strftime('%d.%m.%Y') if db_user.created_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            message = f"""üíæ **–°—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö**

üë§ **–ü—Ä–æ—Ñ–∏–ª—å:**
‚Ä¢ –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {created_date}
‚Ä¢ –¶–µ–ª—å –∫–∞–ª–æ—Ä–∏–π: {db_user.daily_calorie_goal} –∫–∫–∞–ª/–¥–µ–Ω—å

üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚Ä¢ –î–Ω–µ–π —Å –∑–∞–ø–∏—Å—è–º–∏: {tracking_days}
‚Ä¢ –ö–∞–ª–æ—Ä–∏–π —Å–µ–≥–æ–¥–Ω—è: {today_calories:.0f}
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å: {'‚úÖ –î–∞' if (db_user.weight or db_user.height) else '‚öôÔ∏è –ù–µ—Ç'}

üíæ **–•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_type}
‚Ä¢ {persistent}

üí° **–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç:**
{'''‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏! 
   –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö''' if db_type == "PostgreSQL" else 
'''‚ö†Ô∏è –ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç —Å–±—Ä–æ—Å–∏—Ç—å—Å—è
   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å PostgreSQL'''}"""

            keyboard = [
                [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è", callback_data="settings")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

    # ======= –ü–ï–†–°–û–ù–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –û–ù–ë–û–†–î–ò–ù–ì =======
    
    @staticmethod
    async def start_onboarding(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
        user = update.effective_user
        
        welcome_message = f"""
üéØ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {config.BOT_NAME}!**

üëã –ü—Ä–∏–≤–µ—Ç, **{user.first_name}**!

–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–¥—Å—á–µ—Ç—É –∫–∞–ª–æ—Ä–∏–π! 

üî¨ **–î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π** –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –æ –≤–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–µ—â–µ–π:
‚Ä¢ üë§ –í–∞—à –ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, —Ä–æ—Å—Ç –∏ –≤–µ—Å
‚Ä¢ üèÉ –£—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏  
‚Ä¢ üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π

‚è±Ô∏è **–≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ 2 –º–∏–Ω—É—Ç—ã**, –Ω–æ —Å–¥–µ–ª–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –Ω–∞–º–Ω–æ–≥–æ —Ç–æ—á–Ω–µ–µ!

üí° **–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:**
‚Ä¢ üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π –∏–º–µ–Ω–Ω–æ –¥–ª—è –≤–∞—Å
‚Ä¢ üìä –¢–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫ —Ü–µ–ª–∏
‚Ä¢ üí™ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é

–ì–æ—Ç–æ–≤—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å?
"""
        
        keyboard = [
            [InlineKeyboardButton("üöÄ –î–∞, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º!", callback_data="start_setup")],
            [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å (–±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)", callback_data="skip_setup")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                welcome_message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                welcome_message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )

    @staticmethod
    async def onboarding_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–®–∞–≥ 1: –í—ã–±–æ—Ä –ø–æ–ª–∞"""
        query = update.callback_query
        
        message = f"""
üë§ **–®–∞–≥ 1 –∏–∑ 5: –í–∞—à –ø–æ–ª**

–ü–æ–ª –≤–ª–∏—è–µ—Ç –Ω–∞ –±–∞–∑–∞–ª—å–Ω—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º –∏ —Ä–∞—Å—á–µ—Ç –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π.

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:
"""
        
        keyboard = [
            [
                InlineKeyboardButton("üë® –ú—É–∂—Å–∫–æ–π", callback_data="gender_male"),
                InlineKeyboardButton("üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )

    @staticmethod
    async def onboarding_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–®–∞–≥ 2: –í–≤–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
        query = update.callback_query
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª
        if query.data == "gender_male":
            context.user_data['onboarding_gender'] = 'male'
            gender_text = "–º—É–∂—Å–∫–æ–π"
        else:
            context.user_data['onboarding_gender'] = 'female'
            gender_text = "–∂–µ–Ω—Å–∫–∏–π"
        
        message = f"""
üéÇ **–®–∞–≥ 2 –∏–∑ 5: –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç**

‚úÖ –ü–æ–ª: {gender_text}

–í–æ–∑—Ä–∞—Å—Ç –Ω—É–∂–µ–Ω –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞.

**–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç** (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25):
"""
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start_setup")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
        
        context.user_data['waiting_for'] = 'age'

    @staticmethod
    async def onboarding_height(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–®–∞–≥ 3: –í–≤–æ–¥ —Ä–æ—Å—Ç–∞"""
        try:
            age = int(update.message.text.strip())
            if age < 10 or age > 100:
                await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (10-100 –ª–µ—Ç)")
                return
            
            context.user_data['onboarding_age'] = age
            gender_text = "–º—É–∂—Å–∫–æ–π" if context.user_data['onboarding_gender'] == 'male' else "–∂–µ–Ω—Å–∫–∏–π"
            
            message = f"""
üìè **–®–∞–≥ 3 –∏–∑ 5: –í–∞—à —Ä–æ—Å—Ç**

‚úÖ –ü–æ–ª: {gender_text}
‚úÖ –í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç

–†–æ—Å—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–µ–∫—Å–∞ –º–∞—Å—Å—ã —Ç–µ–ª–∞.

**–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö** (–Ω–∞–ø—Ä–∏–º–µ—Ä: 175):
"""
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="onboarding_age")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
            context.user_data['waiting_for'] = 'height'
            
        except ValueError:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25)")

    @staticmethod
    async def onboarding_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–®–∞–≥ 4: –í–≤–æ–¥ –≤–µ—Å–∞"""
        try:
            height = float(update.message.text.strip())
            if height < 100 or height > 250:
                await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (100-250 —Å–º)")
                return
            
            context.user_data['onboarding_height'] = height
            gender_text = "–º—É–∂—Å–∫–æ–π" if context.user_data['onboarding_gender'] == 'male' else "–∂–µ–Ω—Å–∫–∏–π"
            age = context.user_data['onboarding_age']
            
            message = f"""
‚öñÔ∏è **–®–∞–≥ 4 –∏–∑ 5: –í–∞—à –≤–µ—Å**

‚úÖ –ü–æ–ª: {gender_text}
‚úÖ –í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç
‚úÖ –†–æ—Å—Ç: {height:.0f} —Å–º

–í–µ—Å –Ω—É–∂–µ–Ω –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π.

**–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö** (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70 –∏–ª–∏ 65.5):
"""
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="onboarding_height")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
            context.user_data['waiting_for'] = 'weight'
            
        except ValueError:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 175)")

    @staticmethod
    async def onboarding_activity(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–®–∞–≥ 5: –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        try:
            weight = float(update.message.text.strip())
            if weight < 30 or weight > 200:
                await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (30-200 –∫–≥)")
                return
            
            context.user_data['onboarding_weight'] = weight
            gender_text = "–º—É–∂—Å–∫–æ–π" if context.user_data['onboarding_gender'] == 'male' else "–∂–µ–Ω—Å–∫–∏–π"
            age = context.user_data['onboarding_age']
            height = context.user_data['onboarding_height']
            
            message = f"""
üèÉ **–®–∞–≥ 5 –∏–∑ 5: –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏**

‚úÖ –ü–æ–ª: {gender_text}
‚úÖ –í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç
‚úÖ –†–æ—Å—Ç: {height:.0f} —Å–º  
‚úÖ –í–µ—Å: {weight:.1f} –∫–≥

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:
"""
            
            keyboard = [
                [InlineKeyboardButton("üõãÔ∏è –ù–∏–∑–∫–∏–π (—Å–∏–¥—è—á–∞—è —Ä–∞–±–æ—Ç–∞, –Ω–µ—Ç —Å–ø–æ—Ä—Ç–∞)", callback_data="activity_low")],
                [InlineKeyboardButton("üö∂ –£–º–µ—Ä–µ–Ω–Ω—ã–π (–ª–µ–≥–∫–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 1-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é)", callback_data="activity_moderate")],
                [InlineKeyboardButton("üèÉ –í—ã—Å–æ–∫–∏–π (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 4-7 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)", callback_data="activity_high")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
            context.user_data['waiting_for'] = 'activity'
            
        except ValueError:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70 –∏–ª–∏ 65.5)")

    @staticmethod
    async def complete_onboarding(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ —Å —Ä–∞—Å—á–µ—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –Ω–æ—Ä–º—ã"""
        query = update.callback_query
        user = update.effective_user
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        activity_mapping = {
            'activity_low': ('low', '–ù–∏–∑–∫–∏–π'),
            'activity_moderate': ('moderate', '–£–º–µ—Ä–µ–Ω–Ω—ã–π'), 
            'activity_high': ('high', '–í—ã—Å–æ–∫–∏–π')
        }
        
        activity_level, activity_text = activity_mapping[query.data]
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        gender = context.user_data['onboarding_gender']
        age = context.user_data['onboarding_age']
        height = context.user_data['onboarding_height']
        weight = context.user_data['onboarding_weight']
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π
        import logging
        logger = logging.getLogger(__name__)
        logger.info(f"üéØ BOT: –í—ã–∑—ã–≤–∞–µ–º complete_onboarding –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        logger.info(f"üéØ BOT: –î–∞–Ω–Ω—ã–µ: weight={weight}, height={height}, age={age}, gender={gender}, activity={activity_level}")
        
        daily_calories = DatabaseManager.complete_onboarding(
            telegram_id=user.id,
            weight=weight,
            height=height,
            age=age,
            gender=gender,
            activity_level=activity_level
        )
        
        logger.info(f"üéØ BOT: –†–µ–∑—É–ª—å—Ç–∞—Ç complete_onboarding: {daily_calories} (—Ç–∏–ø: {type(daily_calories)})")
        
        if daily_calories:
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
            for key in ['onboarding_gender', 'onboarding_age', 'onboarding_height', 'onboarding_weight', 'waiting_for']:
                context.user_data.pop(key, None)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ò–ú–¢
            bmi = weight / ((height/100) ** 2)
            if bmi < 18.5:
                bmi_status = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –≤–µ—Å–∞"
                bmi_emoji = "üìâ"
            elif bmi < 25:
                bmi_status = "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–µ—Å"
                bmi_emoji = "‚úÖ"
            elif bmi < 30:
                bmi_status = "–ò–∑–±—ã—Ç–æ—á–Ω—ã–π –≤–µ—Å"
                bmi_emoji = "üìà"
            else:
                bmi_status = "–û–∂–∏—Ä–µ–Ω–∏–µ"
                bmi_emoji = "üî∫"
            
            gender_text = "–º—É–∂—Å–∫–æ–π" if gender == 'male' else "–∂–µ–Ω—Å–∫–∏–π"
            
            success_message = f"""
üéâ **–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!**

üë§ **–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:**
‚Ä¢ –ü–æ–ª: {gender_text}
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç
‚Ä¢ –†–æ—Å—Ç: {height:.0f} —Å–º
‚Ä¢ –í–µ—Å: {weight:.1f} –∫–≥
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity_text}

üìä **–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
‚Ä¢ –ò–ú–¢: {bmi:.1f} - {bmi_status} {bmi_emoji}
‚Ä¢ **–í–∞—à–∞ –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {daily_calories} –∫–∫–∞–ª/–¥–µ–Ω—å** üéØ

üöÄ **–¢–µ–ø–µ—Ä—å –≤—Å–µ –≥–æ—Ç–æ–≤–æ!**
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–π –µ–¥—ã, –∏ —è –¥–∞–º —Ç–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —É—á–µ—Ç–æ–º –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π!

üí° **–°–æ–≤–µ—Ç:** –ù–æ—Ä–º–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤–µ—Å–∞. –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã.
"""
            
            keyboard = [
                [InlineKeyboardButton("üçΩÔ∏è –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –µ–¥—ã!", callback_data="add_photo_tip")],
                [InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                success_message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @staticmethod
    async def skip_onboarding(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        query = update.callback_query
        user = update.effective_user
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        DatabaseManager.complete_onboarding(
            telegram_id=user.id,
            weight=70.0,  # –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å
            height=170.0,  # –°—Ä–µ–¥–Ω–∏–π —Ä–æ—Å—Ç
            age=30,       # –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç
            gender='male',  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            activity_level='moderate'  # –£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        )
        
        message = f"""
‚è≠Ô∏è **–û–Ω–±–æ—Ä–¥–∏–Ω–≥ –ø—Ä–æ–ø—É—â–µ–Ω**

–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ –ù–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: **2000 –∫–∫–∞–ª/–¥–µ–Ω—å** üìä

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–ª–æ—Ä–∏–π –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å ‚Üí ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏

üçΩÔ∏è **–ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!**
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –∏ –ø–æ–ª—É—á–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –∫–∞–ª–æ—Ä–∏–π!
"""
        
        keyboard = [
            [InlineKeyboardButton("üì∏ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ", callback_data="add_photo_tip")],
            [InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    @staticmethod
    async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è"""
        await CalorieBotHandlers.stats_handler(update, context)
    
    @staticmethod
    async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        await CalorieBotHandlers.settings_handler(update, context)
    
    @staticmethod
    async def history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–∏—Ç–∞–Ω–∏—è"""
        try:
            user = update.effective_user
            db_user = DatabaseManager.get_or_create_user(telegram_id=user.id)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
            from database import SessionLocal, FoodEntry
            db = SessionLocal()
            try:
                recent_entries = db.query(FoodEntry).filter(
                    FoodEntry.user_id == db_user.id
                ).order_by(FoodEntry.created_at.desc()).limit(10).all()
                
                if not recent_entries:
                    message = "üìÖ **–ò—Å—Ç–æ—Ä–∏—è –ø–∏—Ç–∞–Ω–∏—è –ø—É—Å—Ç–∞**\n\n–ù–∞—á–Ω–∏—Ç–µ —Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –µ–¥—ã!"
                else:
                    message = "üìÖ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:**\n\n"
                    for entry in recent_entries:
                        date_str = entry.created_at.strftime("%d.%m %H:%M")
                        message += f"‚Ä¢ {date_str} - {entry.total_calories:.0f} –∫–∫–∞–ª\n"
                        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ –µ–¥—ã –∏–∑ JSON
                        try:
                            import json
                            if entry.food_items:
                                food_data = json.loads(entry.food_items)
                                if isinstance(food_data, list) and len(food_data) > 0:
                                    first_item = food_data[0]
                                    if isinstance(first_item, dict) and 'name' in first_item:
                                        message += f"  {first_item['name']}\n"
                        except:
                            pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                        message += "\n"
                
                await update.message.reply_text(
                    message,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=CalorieBotHandlers.get_main_keyboard()
                )
            finally:
                db.close()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ history_command: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}",
                reply_markup=CalorieBotHandlers.get_main_keyboard()
            )
    
    @staticmethod
    async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_message = f"""
‚ùì **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

üöÄ **–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:**
1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –±–æ—Ç—É
2Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –∫–∞–ª–æ—Ä–∏–π –∑–∞ 5 —Å–µ–∫—É–Ω–¥  
3Ô∏è‚É£ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ

üì∏ **–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –µ–¥—ã:**
‚Ä¢ AI –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–∏–¥—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
‚Ä¢ –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–∞–ª–æ—Ä–∏–∏, –ë–ñ–£ –∏ –≤–µ—Å
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º–∏ –±–ª—é–¥–∞–º–∏
‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞ 85-95%

üí° **–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:**
üîç –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
üçΩÔ∏è –í—Å—è –ø–æ—Ä—Ü–∏—è –≤ –∫–∞–¥—Ä–µ
üìè –î–æ–±–∞–≤—å—Ç–µ –ª–æ–∂–∫—É –¥–ª—è –º–∞—Å—à—Ç–∞–±–∞
üéØ –ß–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ –±–µ–∑ —Ä–∞–∑–º—ã—Ç–∏—è

üìä **–ß—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –±–æ—Ç:**
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –∏ –ë–ñ–£
‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ –≤–∞—à–µ–π —Ü–µ–ª–∏
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º/–Ω–µ–¥–µ–ª—è–º  
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π

‚öôÔ∏è **–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è:**
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–≤–æ—é —Ü–µ–ª—å –∫–∞–ª–æ—Ä–∏–π
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –≤–µ—Å, —Ä–æ—Å—Ç, –≤–æ–∑—Ä–∞—Å—Ç
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ

üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:**
{'''‚Ä¢ ‚úÖ PostgreSQL - –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞
‚Ä¢ üõ°Ô∏è –ù–∏–∫–∞–∫–∏—Ö –ø–æ—Ç–µ—Ä—å –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö''' if config.DATABASE_URL.startswith('postgresql') else 
'''‚Ä¢ ‚ö†Ô∏è SQLite - –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å—Å—è
‚Ä¢ üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å PostgreSQL'''}

‚ùì –û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ!
"""
        
        keyboard = [
            [
                InlineKeyboardButton("üì∏ –ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photo_tip"),
                InlineKeyboardButton("üéØ –ú–æ—è —Ü–µ–ª—å", callback_data="my_goal")
            ],
            [
                InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
            ],
            [
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = update.message or update.callback_query.message
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                help_message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            main_keyboard = CalorieBotHandlers.get_main_keyboard()
            await update.message.reply_text(
                help_message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=main_keyboard
            )
    
    @staticmethod
    async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –µ–¥—ã"""
        user = update.effective_user
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ
        context.user_data.pop('preserve_analysis_message', None)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user = DatabaseManager.get_or_create_user(
            telegram_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        analyzing_message = await update.message.reply_text(
            f"{config.EMOJIS['food']} –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–µ –±–ª—é–¥–æ...\n‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥"
        )
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            photo = update.message.photo[-1]
            file = await context.bot.get_file(photo.file_id)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
            image_bytes = BytesIO()
            await file.download_to_memory(image_bytes)
            image_data = image_bytes.getvalue()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é AI
            result = await analyzer.analyze_food_image(image_data)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            if result.get('error') and result.get('total_calories', 0) == 0:
                await analyzing_message.edit_text(
                    f"{config.EMOJIS['error']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {result['error']}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if result.get('total_calories', 0) > 0:
                DatabaseManager.add_food_entry(
                    user_id=db_user.id,
                    food_data=json.dumps(result['food_items'], ensure_ascii=False),
                    total_calories=result['total_calories'],
                    total_proteins=result.get('total_proteins', 0),
                    total_carbs=result.get('total_carbs', 0),
                    total_fats=result.get('total_fats', 0),
                    confidence=result.get('confidence', 0),
                    photo_id=photo.file_id
                )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            formatted_result = analyzer.format_analysis_result(result)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–Ω–µ–≤–Ω–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø–æ–ª—É—á–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏ –ü–û–°–õ–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
            today_calories = DatabaseManager.get_today_calories(db_user.id)
            daily_goal = db_user.daily_calorie_goal
            remaining = daily_goal - today_calories
            
            progress_message = f"\n\n{config.EMOJIS['chart']} **–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –¥–µ–Ω—å:**\n"
            progress_message += f"–°—ä–µ–¥–µ–Ω–æ: {today_calories:.0f} –∏–∑ {daily_goal} –∫–∫–∞–ª\n"
            
            if remaining > 0:
                progress_message += f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining:.0f} –∫–∫–∞–ª {config.EMOJIS['checkmark']}"
            else:
                over = abs(remaining)
                progress_message += f"–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ: +{over:.0f} –∫–∫–∞–ª {config.EMOJIS['warning']}"
            
            formatted_result += progress_message
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
            context.user_data['last_photo_id'] = photo.file_id
            context.user_data['last_analysis_result'] = result
            context.user_data['preserve_analysis_message'] = True  # –§–ª–∞–≥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–Ω–∞–ª–∏–∑–æ–º
            
            # –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            keyboard = [
                # –ü–µ—Ä–≤—ã–π —Ä—è–¥ - –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                [
                    InlineKeyboardButton("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="stats"),
                    InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
                ],
                # –í—Ç–æ—Ä–æ–π —Ä—è–¥ - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
                [
                    InlineKeyboardButton("üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="correct_analysis"),
                    InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –±–ª—é–¥–æ", callback_data="add_more")
                ],
                # –¢—Ä–µ—Ç–∏–π —Ä—è–¥ - –Ω–∞–≤–∏–≥–∞—Ü–∏—è
                [
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await analyzing_message.edit_text(
                formatted_result,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
            await analyzing_message.edit_text(
                f"{config.EMOJIS['error']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
            )
    
    @staticmethod
    async def stats_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        user = update.effective_user if update.message else update.callback_query.from_user
        
        db_user = DatabaseManager.get_or_create_user(telegram_id=user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é
        stats = DatabaseManager.get_user_stats(db_user.id, days=7)
        
        if not stats:
            message = f"{config.EMOJIS['stats']} **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è**\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø–∏—Ç–∞–Ω–∏–∏.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ!"
        else:
            # –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            today = datetime.now().date()
            today_stat = next((s for s in stats if s.date == today), None)
            
            message = f"{config.EMOJIS['stats']} **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è**\n\n"
            
            if today_stat:
                message += f"**–°–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m')})**\n"
                message += f"{config.EMOJIS['fire']} –ö–∞–ª–æ—Ä–∏–∏: {today_stat.total_calories:.0f} –∏–∑ {db_user.daily_calorie_goal}\n"
                message += f"{config.EMOJIS['muscle']} –ë–µ–ª–∫–∏: {today_stat.total_proteins:.1f}–≥\n"
                message += f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {today_stat.total_carbs:.1f}–≥\n"
                message += f"ü•ë –ñ–∏—Ä—ã: {today_stat.total_fats:.1f}–≥\n"
                message += f"{config.EMOJIS['food']} –ü—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: {today_stat.meals_count}\n\n"
                
                # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏
                progress = (today_stat.total_calories / db_user.daily_calorie_goal) * 100
                if progress <= 100:
                    message += f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏: {progress:.1f}% {config.EMOJIS['checkmark']}\n\n"
                else:
                    message += f"üìä –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–ª–∏: {progress:.1f}% {config.EMOJIS['warning']}\n\n"
            
            # –°—Ä–µ–¥–Ω–∏–µ –∑–∞ –Ω–µ–¥–µ–ª—é
            weekly_avg_calories = sum(s.total_calories for s in stats) / len(stats)
            weekly_total_calories = sum(s.total_calories for s in stats)
            
            message += f"**–ó–∞ –Ω–µ–¥–µ–ª—é (—Å—Ä–µ–¥–Ω–∏–µ –≤ –¥–µ–Ω—å)**\n"
            message += f"{config.EMOJIS['fire']} –ö–∞–ª–æ—Ä–∏–∏: {weekly_avg_calories:.0f}\n"
            message += f"üìà –í—Å–µ–≥–æ –∑–∞ –Ω–µ–¥–µ–ª—é: {weekly_total_calories:.0f} –∫–∫–∞–ª\n"
            message += f"üìÖ –î–Ω–µ–π —Å –∑–∞–ø–∏—Å—è–º–∏: {len(stats)} –∏–∑ 7"
        
        keyboard = [
            [InlineKeyboardButton(f"{config.EMOJIS['chart']} –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_stats")],
            [InlineKeyboardButton(f"{config.EMOJIS['settings']} –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–µ–ª–∏", callback_data="settings")],
            [InlineKeyboardButton(f"{config.EMOJIS['back']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ñ–æ—Ç–æ
        preserve_analysis = context.user_data.get('preserve_analysis_message', False)
        
        if update.callback_query and not preserve_analysis:
            await update.callback_query.edit_message_text(
                message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            reply_markup = CalorieBotHandlers.get_main_keyboard()
            
            # –ï—Å–ª–∏ —ç—Ç–æ callback –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ –∏–ª–∏ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if update.callback_query:
                await update.callback_query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
                bot = update.callback_query.get_bot()
                chat_id = update.callback_query.message.chat_id
                await bot.send_message(
                    chat_id=chat_id,
                    text=message,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=reply_markup
                )
            else:
                await update.message.reply_text(
                    message,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=reply_markup
                )
    
    @staticmethod
    async def settings_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        user = update.effective_user if update.message else update.callback_query.from_user
        db_user = DatabaseManager.get_or_create_user(telegram_id=user.id)
        
        # –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(f"‚öôÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} ({db_user.telegram_id}):")
        logger.info(f"   –¶–µ–ª—å –∫–∞–ª–æ—Ä–∏–π: {db_user.daily_calorie_goal}")
        logger.info(f"   –í–µ—Å: {db_user.weight}")
        logger.info(f"   –†–æ—Å—Ç: {db_user.height}")
        logger.info(f"   –í–æ–∑—Ä–∞—Å—Ç: {db_user.age}")
        logger.info(f"   –ü–æ–ª: {db_user.gender}")
        
        message = f"{config.EMOJIS['settings']} **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è**\n\n"
        message += f"**–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
        message += f"üéØ –¶–µ–ª—å –∫–∞–ª–æ—Ä–∏–π –≤ –¥–µ–Ω—å: {db_user.daily_calorie_goal} –∫–∫–∞–ª\n"
        
        if db_user.weight:
            message += f"{config.EMOJIS['scales']} –í–µ—Å: {db_user.weight} –∫–≥\n"
        if db_user.height:
            message += f"üìè –†–æ—Å—Ç: {db_user.height} —Å–º\n"
        if db_user.age:
            message += f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {db_user.age} –ª–µ—Ç\n"
        if db_user.gender:
            message += f"üë§ –ü–æ–ª: {'–º—É–∂—Å–∫–æ–π' if db_user.gender == 'male' else '–∂–µ–Ω—Å–∫–∏–π'}\n"
        
        message += f"\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:"
        
        keyboard = [
            [InlineKeyboardButton("üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å –∫–∞–ª–æ—Ä–∏–π", callback_data="set_calorie_goal")],
            [InlineKeyboardButton(f"{config.EMOJIS['scales']} –û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Å", callback_data="set_weight")],
            [InlineKeyboardButton("üìè –£–∫–∞–∑–∞—Ç—å —Ä–æ—Å—Ç", callback_data="set_height")],
            [InlineKeyboardButton("üë§ –£–∫–∞–∑–∞—Ç—å –ø–æ–ª –∏ –≤–æ–∑—Ä–∞—Å—Ç", callback_data="set_personal_info")],
            [InlineKeyboardButton(f"{config.EMOJIS['back']} –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if update.callback_query:
            await update.callback_query.edit_message_text(
                message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            main_keyboard = CalorieBotHandlers.get_main_keyboard()
            await update.message.reply_text(
                message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=main_keyboard
            )
    
    @staticmethod
    async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "main_menu":
            await CalorieBotHandlers.start_command(update, context)
        elif query.data == "stats":
            await CalorieBotHandlers.stats_handler(update, context)
        elif query.data == "settings":
            await CalorieBotHandlers.settings_handler(update, context)
        elif query.data == "help":
            await CalorieBotHandlers.help_command(update, context)
        elif query.data == "add_more":
            await query.answer()
            bot = query.get_bot()
            chat_id = query.message.chat_id
            await bot.send_message(
                chat_id=chat_id,
                text=f"{config.EMOJIS['food']} –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–ª—é–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–ª–æ—Ä–∏–π!"
            )
        elif query.data == "detailed_stats":
            await CalorieBotHandlers.detailed_stats_handler(update, context)
        elif query.data.startswith("set_"):
            await CalorieBotHandlers.settings_input_handler(update, context)
        elif query.data == "correct_analysis":
            await CalorieBotHandlers.correction_handler(update, context)
        elif query.data == "cancel_correction":
            context.user_data.pop('waiting_for', None)
            context.user_data.pop('correction_photo_id', None)
            await query.edit_message_text("‚ùå –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        elif query.data == "daily_history":
            await CalorieBotHandlers.daily_history_handler(update, context)
        elif query.data == "weekly_stats_detail":
            await CalorieBotHandlers.weekly_stats_detail_handler(update, context)
        elif query.data == "back_to_profile":
            await CalorieBotHandlers.back_to_profile_handler(update, context)
        elif query.data == "edit_profile":
            await CalorieBotHandlers.settings_handler(update, context)
        elif query.data == "profile":
            await CalorieBotHandlers.profile_callback_handler(update, context)
        elif query.data == "add_photo_tip":
            await CalorieBotHandlers.photo_tip_handler(update, context)
        elif query.data == "my_goal":
            await CalorieBotHandlers.my_goal_handler(update, context) 
        elif query.data == "data_status":
            await CalorieBotHandlers.data_status_handler(update, context)
        
        # –û–Ω–±–æ—Ä–¥–∏–Ω–≥ callbacks
        elif query.data == "start_setup":
            await CalorieBotHandlers.onboarding_gender(update, context)
        elif query.data == "skip_setup":
            await CalorieBotHandlers.skip_onboarding(update, context)
        elif query.data in ["gender_male", "gender_female"]:
            await CalorieBotHandlers.onboarding_age(update, context)
        elif query.data in ["activity_low", "activity_moderate", "activity_high"]:
            await CalorieBotHandlers.complete_onboarding(update, context)
    
    @staticmethod
    async def detailed_stats_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        user = update.callback_query.from_user
        db_user = DatabaseManager.get_or_create_user(telegram_id=user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –º–µ—Å—è—Ü
        stats = DatabaseManager.get_user_stats(db_user.id, days=30)
        
        if not stats:
            message = f"{config.EMOJIS['chart']} **–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å–∏ –æ –ø–∏—Ç–∞–Ω–∏–∏!"
        else:
            message = f"{config.EMOJIS['chart']} **–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π**\n\n"
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_calories = sum(s.total_calories for s in stats)
            avg_calories = total_calories / len(stats)
            days_with_records = len(stats)
            
            message += f"**–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n"
            message += f"üìä –î–Ω–µ–π —Å –∑–∞–ø–∏—Å—è–º–∏: {days_with_records} –∏–∑ 30\n"
            message += f"üî• –û–±—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {total_calories:.0f} –∫–∫–∞–ª\n"
            message += f"üìà –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {avg_calories:.0f} –∫–∫–∞–ª\n"
            message += f"üéØ –¶–µ–ª—å –≤ –¥–µ–Ω—å: {db_user.daily_calorie_goal} –∫–∫–∞–ª\n\n"
            
            # –ê–Ω–∞–ª–∏–∑ —Å–æ–±–ª—é–¥–µ–Ω–∏—è —Ü–µ–ª–∏
            goal_days = sum(1 for s in stats if s.total_calories <= db_user.daily_calorie_goal)
            goal_percentage = (goal_days / days_with_records) * 100 if days_with_records > 0 else 0
            
            message += f"**–°–æ–±–ª—é–¥–µ–Ω–∏–µ —Ü–µ–ª–∏:**\n"
            message += f"‚úÖ –î–Ω–µ–π –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ü–µ–ª–∏: {goal_days} ({goal_percentage:.1f}%)\n"
            message += f"‚ö†Ô∏è –î–Ω–µ–π —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º: {days_with_records - goal_days}\n\n"
            
            # –ü–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞
            avg_proteins = sum(s.total_proteins for s in stats) / len(stats)
            avg_carbs = sum(s.total_carbs for s in stats) / len(stats)
            avg_fats = sum(s.total_fats for s in stats) / len(stats)
            
            message += f"**–ü–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –≤–µ—â–µ—Å—Ç–≤–∞ (—Å—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å):**\n"
            message += f"üí™ –ë–µ–ª–∫–∏: {avg_proteins:.1f}–≥\n"
            message += f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {avg_carbs:.1f}–≥\n"
            message += f"ü•ë –ñ–∏—Ä—ã: {avg_fats:.1f}–≥\n"
        
        keyboard = [
            [InlineKeyboardButton(f"{config.EMOJIS['back']} –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="stats")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    @staticmethod
    async def settings_input_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        query = update.callback_query
        setting_type = query.data
        
        if setting_type == "set_calorie_goal":
            message = f"üéØ **–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏ –∫–∞–ª–æ—Ä–∏–π**\n\n–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –≤ –¥–µ–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2000):"
            context.user_data['waiting_for'] = 'calorie_goal'
        elif setting_type == "set_weight":
            message = f"{config.EMOJIS['scales']} **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Å–∞**\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70.5):"
            context.user_data['waiting_for'] = 'weight'
        elif setting_type == "set_height":
            message = f"üìè **–£–∫–∞–∑–∞–Ω–∏–µ —Ä–æ—Å—Ç–∞**\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 175):"
            context.user_data['waiting_for'] = 'height'
        elif setting_type == "set_personal_info":
            message = f"üë§ **–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç –∏ –ø–æ–ª —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25 –º—É–∂—Å–∫–æ–π –∏–ª–∏ 30 –∂–µ–Ω—Å–∫–∏–π):"
            context.user_data['waiting_for'] = 'personal_info'
        
        keyboard = [
            [InlineKeyboardButton(f"{config.EMOJIS['back']} –û—Ç–º–µ–Ω–∞", callback_data="settings")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    @staticmethod
    async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        text = update.message.text
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        if text == "üçΩÔ∏è –ê–Ω–∞–ª–∏–∑ –µ–¥—ã":
            await CalorieBotHandlers.photo_tip_handler(update, context)
        elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            await CalorieBotHandlers.stats_command(update, context)
        elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            await CalorieBotHandlers.settings_command(update, context)
        elif text == "üìÖ –ò—Å—Ç–æ—Ä–∏—è":
            await CalorieBotHandlers.history_command(update, context)
        elif text == "‚ùì –ü–æ–º–æ—â—å":
            await CalorieBotHandlers.help_command(update, context)
        elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await CalorieBotHandlers.start_command(update, context)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        elif context.user_data.get('waiting_for') == 'correction':
            await CalorieBotHandlers.process_correction(update, context, text)
        elif context.user_data.get('waiting_for') == 'age':
            await CalorieBotHandlers.onboarding_height(update, context)
        elif context.user_data.get('waiting_for') == 'height':
            await CalorieBotHandlers.onboarding_weight(update, context)
        elif context.user_data.get('waiting_for') == 'weight':
            await CalorieBotHandlers.onboarding_activity(update, context)
        elif context.user_data.get('waiting_for'):
            await CalorieBotHandlers.process_settings_input(update, context, text)
        else:
            # –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.message.reply_text(
                f"{config.EMOJIS['food']} –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–π –µ–¥—ã, –∏ —è –ø–æ—Å—á–∏—Ç–∞—é –∫–∞–ª–æ—Ä–∏–∏!\n\n"
                f"–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏:\n"
                f"/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                f"/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
                f"/help - –ø–æ–º–æ—â—å"
            )
    
    @staticmethod
    async def process_settings_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        user = update.effective_user
        db_user = DatabaseManager.get_or_create_user(telegram_id=user.id)
        waiting_for = context.user_data.get('waiting_for')
        
        success = False
        error_message = ""
        
        try:
            if waiting_for == 'calorie_goal':
                calorie_goal = int(text)
                if 500 <= calorie_goal <= 5000:
                    # –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏ –∫–∞–ª–æ—Ä–∏–π
                    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({db_user.telegram_id}) –º–µ–Ω—è–µ—Ç —Ü–µ–ª—å –∫–∞–ª–æ—Ä–∏–π: {db_user.daily_calorie_goal} ‚Üí {calorie_goal}")
                    updated_user = DatabaseManager.update_user_settings(db_user.id, daily_calorie_goal=calorie_goal)
                    success = True
                    message = f"‚úÖ –¶–µ–ª—å –∫–∞–ª–æ—Ä–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {calorie_goal} –∫–∫–∞–ª –≤ –¥–µ–Ω—å"
                    logger.info(f"‚úÖ –¶–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ë–î: {updated_user.daily_calorie_goal}")
                else:
                    error_message = "–¶–µ–ª—å –∫–∞–ª–æ—Ä–∏–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–∂–¥—É 500 –∏ 5000 –∫–∫–∞–ª"
            
            elif waiting_for == 'weight':
                weight = float(text.replace(',', '.'))
                if 20 <= weight <= 300:
                    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({db_user.telegram_id}) —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–µ—Å: {weight} –∫–≥")
                    updated_user = DatabaseManager.update_user_settings(db_user.id, weight=weight)
                    success = True
                    message = f"‚úÖ –í–µ—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {weight} –∫–≥"
                    logger.info(f"‚úÖ –í–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: {updated_user.weight}")
                else:
                    error_message = "–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 20 –∏ 300 –∫–≥"
            
            elif waiting_for == 'height':
                height = int(text)
                if 100 <= height <= 250:
                    DatabaseManager.update_user_settings(db_user.id, height=height)
                    success = True
                    message = f"‚úÖ –†–æ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {height} —Å–º"
                else:
                    error_message = "–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 100 –∏ 250 —Å–º"
            
            elif waiting_for == 'personal_info':
                parts = text.lower().split()
                if len(parts) >= 2:
                    age = int(parts[0])
                    gender = 'male' if '–º—É–∂' in parts[1] else 'female' if '–∂–µ–Ω' in parts[1] else None
                    
                    if 10 <= age <= 120 and gender:
                        DatabaseManager.update_user_settings(db_user.id, age=age, gender=gender)
                        success = True
                        gender_text = '–º—É–∂—Å–∫–æ–π' if gender == 'male' else '–∂–µ–Ω—Å–∫–∏–π'
                        message = f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {age} –ª–µ—Ç, {gender_text}"
                    else:
                        error_message = "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: –≤–æ–∑—Ä–∞—Å—Ç (10-120) –∏ –ø–æ–ª (–º—É–∂—Å–∫–æ–π/–∂–µ–Ω—Å–∫–∏–π)"
                else:
                    error_message = "–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –∏ –ø–æ–ª —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª"
        
        except ValueError:
            error_message = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        context.user_data.pop('waiting_for', None)
        
        if success:
            keyboard = [
                [InlineKeyboardButton(f"{config.EMOJIS['settings']} –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
                [InlineKeyboardButton(f"{config.EMOJIS['back']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
        else:
            message = f"‚ùå {error_message}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é."
            keyboard = [
                [InlineKeyboardButton(f"{config.EMOJIS['back']} –û—Ç–º–µ–Ω–∞", callback_data="settings")]
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            message,
            reply_markup=reply_markup
        )

    @staticmethod
    async def correction_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞"""
        query = update.callback_query
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
        if 'last_analysis_result' not in context.user_data:
            await query.answer()
            bot = query.get_bot()
            chat_id = query.message.chat_id
            await bot.send_message(
                chat_id=chat_id,
                text="‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏. –ü–æ—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ."
            )
            return
        
        context.user_data['waiting_for'] = 'correction'
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        result = context.user_data['last_analysis_result']
        current_items = "\n".join([
            f"‚Ä¢ {item['name']}: {item.get('estimated_weight', '–≤–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω')}"
            for item in result.get('food_items', [])
        ])
        
        message = f"""
üîß **–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞**

**–¢–µ–∫—É—â–∏–π –∞–Ω–∞–ª–∏–∑:**
{current_items}
**–û–±—â–∏–µ –∫–∞–ª–æ—Ä–∏–∏:** {result.get('total_calories', 0)} –∫–∫–∞–ª

**–ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:**
‚Ä¢ `calories 850` - –∏–∑–º–µ–Ω–∏—Ç—å –æ–±—â–∏–µ –∫–∞–ª–æ—Ä–∏–∏  
‚Ä¢ `–±—É—Ç–µ—Ä–±—Ä–æ–¥—ã 320–≥` - –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ `calories 900`
‚Ä¢ `–±—É—Ç–µ—Ä–±—Ä–æ–¥—ã 320–≥`
‚Ä¢ `–±–ª–∏–Ω—ã 180–≥`

–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
"""
        
        keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_correction")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –∏—Å—Ö–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        await query.answer()
        bot = query.get_bot()
        chat_id = query.message.chat_id
        await bot.send_message(
            chat_id=chat_id,
            text=message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )

    @staticmethod
    async def process_correction(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
        user = update.effective_user
        db_user = DatabaseManager.get_or_create_user(telegram_id=user.id)
        
        try:
            # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –∫–æ—Ä—Ä–µ–∫—Ü–∏—é
            text_lower = text.lower()
            
            if text_lower.startswith('–∫–∞–ª–æ—Ä–∏–∏ '):
                # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –æ–±—â–∏—Ö –∫–∞–ª–æ—Ä–∏–π
                new_calories = int(text.split()[1])
                if 0 <= new_calories <= 5000:
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –≤ –ë–î
                    message = f"‚úÖ –ö–∞–ª–æ—Ä–∏–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã: {new_calories} –∫–∫–∞–ª"
                    success = True
                else:
                    message = "‚ùå –ö–∞–ª–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 5000"
                    success = False
            else:
                # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –≤–µ—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
                parts = text.split()
                if len(parts) >= 2:
                    dish_name = parts[0]
                    new_weight = ' '.join(parts[1:])
                    message = f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {dish_name} - {new_weight}"
                    success = True
                else:
                    message = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: '–±–ª—é–¥–æ –≤–µ—Å' (–Ω–∞–ø—Ä–∏–º–µ—Ä: –±–ª–∏–Ω—ã 180–≥)"
                    success = False
            
        except ValueError:
            message = "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∏—Å–ª–∞"
            success = False
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data.pop('waiting_for', None)
        context.user_data.pop('correction_photo_id', None)
        
        keyboard = [
            [InlineKeyboardButton(f"{config.EMOJIS['stats']} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton(f"{config.EMOJIS['back']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            message,
            reply_markup=reply_markup
        )

    @staticmethod
    async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = update.effective_user
        db_user = DatabaseManager.get_or_create_user(telegram_id=user.id)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        profile_info = DatabaseManager.get_user_info(db_user.id)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤–µ–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
        tracking_days = DatabaseManager.get_tracking_days(db_user.id)
        
        message = f"""
üë§ **–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç**

**–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
üìù –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìä –í–µ–¥—ë—Ç–µ –∑–∞–ø–∏—Å–∏: {tracking_days} –¥–Ω–µ–π
üéØ –¶–µ–ª—å –∫–∞–ª–æ—Ä–∏–π: {db_user.daily_calorie_goal} –∫–∫–∞–ª/–¥–µ–Ω—å

**–§–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**
‚öñÔ∏è –í–µ—Å: {db_user.weight if db_user.weight else '–ù–µ —É–∫–∞–∑–∞–Ω'} –∫–≥
üìè –†–æ—Å—Ç: {db_user.height if db_user.height else '–ù–µ —É–∫–∞–∑–∞–Ω'} —Å–º
üéÇ –í–æ–∑—Ä–∞—Å—Ç: {db_user.age if db_user.age else '–ù–µ —É–∫–∞–∑–∞–Ω'} –ª–µ—Ç
üöª –ü–æ–ª: {db_user.gender if db_user.gender else '–ù–µ —É–∫–∞–∑–∞–Ω'}

**–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üî• –°–µ–≥–æ–¥–Ω—è: {profile_info['today_calories']} / {db_user.daily_calorie_goal} –∫–∫–∞–ª
üìà –ó–∞ –Ω–µ–¥–µ–ª—é: {profile_info['week_avg']:.0f} –∫–∫–∞–ª/–¥–µ–Ω—å (—Å—Ä–µ–¥–Ω–µ–µ)
üìÖ –ó–∞ –º–µ—Å—è—Ü: {profile_info['month_avg']:.0f} –∫–∫–∞–ª/–¥–µ–Ω—å (—Å—Ä–µ–¥–Ω–µ–µ)
"""
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –ò—Å—Ç–æ—Ä–∏—è –ø–æ –¥–Ω—è–º", callback_data="daily_history")],
            [InlineKeyboardButton("üìä –ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="weekly_stats_detail")],
            [InlineKeyboardButton("‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="edit_profile")],
            [InlineKeyboardButton(f"{config.EMOJIS['back']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )

    @staticmethod
    async def profile_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""
        query = update.callback_query
        user = query.from_user
        db_user = DatabaseManager.get_or_create_user(telegram_id=user.id)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        profile_info = DatabaseManager.get_user_info(db_user.id)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤–µ–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
        tracking_days = DatabaseManager.get_tracking_days(db_user.id)
        
        message = f"""
üë§ **–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç**

**–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
üìù –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìä –í–µ–¥—ë—Ç–µ –∑–∞–ø–∏—Å–∏: {tracking_days} –¥–Ω–µ–π
üéØ –¶–µ–ª—å –∫–∞–ª–æ—Ä–∏–π: {db_user.daily_calorie_goal} –∫–∫–∞–ª/–¥–µ–Ω—å

**–§–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**
‚öñÔ∏è –í–µ—Å: {db_user.weight if db_user.weight else '–ù–µ —É–∫–∞–∑–∞–Ω'} –∫–≥
üìè –†–æ—Å—Ç: {db_user.height if db_user.height else '–ù–µ —É–∫–∞–∑–∞–Ω'} —Å–º
üéÇ –í–æ–∑—Ä–∞—Å—Ç: {db_user.age if db_user.age else '–ù–µ —É–∫–∞–∑–∞–Ω'} –ª–µ—Ç
üöª –ü–æ–ª: {db_user.gender if db_user.gender else '–ù–µ —É–∫–∞–∑–∞–Ω'}

**–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üî• –°–µ–≥–æ–¥–Ω—è: {profile_info['today_calories']} / {db_user.daily_calorie_goal} –∫–∫–∞–ª
üìà –ó–∞ –Ω–µ–¥–µ–ª—é: {profile_info['week_avg']:.0f} –∫–∫–∞–ª/–¥–µ–Ω—å (—Å—Ä–µ–¥–Ω–µ–µ)
üìÖ –ó–∞ –º–µ—Å—è—Ü: {profile_info['month_avg']:.0f} –∫–∫–∞–ª/–¥–µ–Ω—å (—Å—Ä–µ–¥–Ω–µ–µ)
"""
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –ò—Å—Ç–æ—Ä–∏—è –ø–æ –¥–Ω—è–º", callback_data="daily_history")],
            [InlineKeyboardButton("üìä –ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="weekly_stats_detail")],
            [InlineKeyboardButton("‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="edit_profile")],
            [InlineKeyboardButton(f"{config.EMOJIS['back']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )

    @staticmethod
    async def daily_history_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–∞–ª–æ—Ä–∏–π –ø–æ –¥–Ω—è–º"""
        query = update.callback_query
        user = query.from_user
        db_user = DatabaseManager.get_or_create_user(telegram_id=user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π
        daily_history = DatabaseManager.get_daily_calorie_history(db_user.id, days=14)
        
        if not daily_history:
            message = f"{config.EMOJIS['warning']} **–ò—Å—Ç–æ—Ä–∏—è –∫–∞–ª–æ—Ä–∏–π**\n\n–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø–∏—Ç–∞–Ω–∏–∏.\n–ù–∞—á–Ω–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ –µ–¥—ã!"
        else:
            message = f"üìÖ **–ò—Å—Ç–æ—Ä–∏—è –∫–∞–ª–æ—Ä–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π)**\n\n"
            
            for entry in daily_history:
                date_str = entry['date'].strftime("%d.%m")
                day_name = entry['date'].strftime("%a")  # —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è
                calories = entry['calories']
                goal = db_user.daily_calorie_goal
                
                # –≠–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
                if calories >= goal * 0.9 and calories <= goal * 1.1:
                    status = "üéØ"  # –±–ª–∏–∑–∫–æ –∫ —Ü–µ–ª–∏
                elif calories < goal * 0.7:
                    status = "üîΩ"  # –º–∞–ª–æ
                elif calories > goal * 1.3:
                    status = "üî∫"  # –º–Ω–æ–≥–æ
                else:
                    status = "üìä"  # –Ω–æ—Ä–º–∞
                
                message += f"{status} **{date_str} ({day_name}):** {calories:.0f} –∫–∫–∞–ª\n"
        
        keyboard = [
            [InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_stats")],
            [InlineKeyboardButton(f"{config.EMOJIS['back']} –ö –ø—Ä–æ—Ñ–∏–ª—é", callback_data="back_to_profile")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )

    @staticmethod
    async def weekly_stats_detail_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        query = update.callback_query
        user = query.from_user
        db_user = DatabaseManager.get_or_create_user(telegram_id=user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 –Ω–µ–¥–µ–ª–∏
        weekly_stats = DatabaseManager.get_weekly_stats(db_user.id)
        
        if not weekly_stats:
            message = f"{config.EMOJIS['warning']} **–ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö.\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–µ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏!"
        else:
            message = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–µ–¥–µ–ª—è–º**\n\n"
            
            for i, week in enumerate(weekly_stats):
                week_num = i + 1
                avg_calories = week['avg_calories']
                days_tracked = week['days_tracked']
                goal = db_user.daily_calorie_goal
                
                # –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Ü–µ–ª–∏
                goal_percent = (avg_calories / goal * 100) if goal > 0 else 0
                
                if goal_percent >= 90 and goal_percent <= 110:
                    status = "üéØ –û—Ç–ª–∏—á–Ω–æ"
                elif goal_percent < 80:
                    status = "üîΩ –ú–∞–ª–æ –∫–∞–ª–æ—Ä–∏–π"
                elif goal_percent > 120:
                    status = "üî∫ –ú–Ω–æ–≥–æ –∫–∞–ª–æ—Ä–∏–π"
                else:
                    status = "üìä –ù–æ—Ä–º–∞"
                
                message += f"**–ù–µ–¥–µ–ª—è {week_num}:**\n"
                message += f"üìà –°—Ä–µ–¥–Ω–µ–µ: {avg_calories:.0f} –∫–∫–∞–ª/–¥–µ–Ω—å ({goal_percent:.0f}%)\n"
                message += f"üìÖ –î–Ω–µ–π —Å –∑–∞–ø–∏—Å—è–º–∏: {days_tracked}/7\n"
                message += f"{status}\n\n"
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –ò—Å—Ç–æ—Ä–∏—è –ø–æ –¥–Ω—è–º", callback_data="daily_history")],
            [InlineKeyboardButton(f"{config.EMOJIS['back']} –ö –ø—Ä–æ—Ñ–∏–ª—é", callback_data="back_to_profile")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )

    @staticmethod
    async def back_to_profile_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Ñ–∏–ª—é"""
        await CalorieBotHandlers.profile_callback_handler(update, context)

class WeeklyStatsScheduler:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, application):
        self.application = application
    
    async def send_weekly_stats(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        
        from database import SessionLocal, User
        db = SessionLocal()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = db.query(User).filter(User.is_active == True).all()
            
            for user in users:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é
                    weekly_stats = DatabaseManager.get_weekly_stats(user.id)
                    
                    if not weekly_stats:
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    current_week = weekly_stats[0] if weekly_stats else None
                    if not current_week:
                        continue
                    
                    avg_calories = current_week['avg_calories']
                    days_tracked = current_week['days_tracked']
                    goal = user.daily_calorie_goal
                    goal_percent = (avg_calories / goal * 100) if goal > 0 else 0
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    if goal_percent >= 90 and goal_percent <= 110:
                        status = "üéØ –û—Ç–ª–∏—á–Ω–æ! –í—ã –±–ª–∏–∑–∫–∏ –∫ —Ü–µ–ª–∏"
                        emoji = "üéâ"
                    elif goal_percent < 80:
                        status = "üîΩ –°—Ç–æ–∏—Ç —É–≤–µ–ª–∏—á–∏—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å"
                        emoji = "üí™"
                    elif goal_percent > 120:
                        status = "üî∫ –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –±—ã—Ç—å —É–º–µ—Ä–µ–Ω–Ω–µ–µ"
                        emoji = "üßò‚Äç‚ôÇÔ∏è"
                    else:
                        status = "üìä –î–µ—Ä–∂–∏—Ç–µ—Å—å –≤ –Ω–æ—Ä–º–µ"
                        emoji = "‚úÖ"
                    
                    message = f"""
{emoji} **–ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏**

**–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:**
üìà –°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {avg_calories:.0f} –∫–∫–∞–ª/–¥–µ–Ω—å
üéØ –í–∞—à–∞ —Ü–µ–ª—å: {goal} –∫–∫–∞–ª/–¥–µ–Ω—å
üìä –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏: {goal_percent:.0f}%
üìÖ –î–Ω–µ–π —Å –∑–∞–ø–∏—Å—è–º–∏: {days_tracked}/7

{status}

**–°–æ–≤–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é:**
{"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!" if 90 <= goal_percent <= 110 else "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∫–∞–ª–æ—Ä–∏—è–º–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!"}

–£–¥–∞—á–∏ –≤ –Ω–æ–≤–æ–π –Ω–µ–¥–µ–ª–µ! üåü
                    """
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await self.application.bot.send_message(
                        chat_id=user.telegram_id,
                        text=message.strip(),
                        parse_mode=ParseMode.MARKDOWN
                    )
                    
                    logger.info(f"–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    await asyncio.sleep(1)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
                    continue
                    
        finally:
            db.close()
        
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def schedule_weekly_stats(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 20:00
        schedule.every().sunday.at("20:00").do(
            lambda: asyncio.create_task(self.send_weekly_stats())
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def run_scheduler():
            while True:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        
        scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
        scheduler_thread.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—É—â–µ–Ω")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –Ω–∞—á–∞—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    create_tables()
    logger.info("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ü–ï–†–ï–î –ª—é–±—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
    logger.info("üîß –ó–ê–ü–£–°–ö–ê–ï–ú –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–£–Æ –ú–ò–ì–†–ê–¶–ò–Æ telegram_id...")
    try:
        from database import migrate_telegram_id_if_needed, engine
        migrate_telegram_id_if_needed()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–∏–≥—Ä–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å
        try:
            from sqlalchemy import text
            with engine.connect() as connection:
                result = connection.execute(text("""
                    SELECT data_type 
                    FROM information_schema.columns 
                    WHERE table_name = 'users' 
                    AND column_name = 'telegram_id'
                """))
                row = result.fetchone()
                if row and row[0] == 'bigint':
                    logger.info("‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û: telegram_id —É—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ BIGINT")
                    logger.info("‚úÖ –ë–æ–ª—å—à–∏–µ Telegram ID —Ç–µ–ø–µ—Ä—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è")
                else:
                    logger.error(f"üö® –ú–ò–ì–†–ê–¶–ò–Ø –ù–ï –°–†–ê–ë–û–¢–ê–õ–ê! telegram_id –≤—Å–µ –µ—â–µ –∏–º–µ–µ—Ç —Ç–∏–ø: {row[0] if row else '–ù–ï–ò–ó–í–ï–°–¢–ù–û'}")
                    logger.error("üö® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –±–æ–ª—å—à–∏–º–∏ ID –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å –æ—à–∏–±–∫–∏!")
        except Exception as check_error:
            logger.error(f"üö® –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏: {check_error}")
            
        logger.info("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")
    except Exception as migration_error:
        logger.error(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ú–ò–ì–†–ê–¶–ò–ò: {migration_error}")
        logger.error("üö® –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –±–æ–ª—å—à–∏–º–∏ ID –ø–æ–ª—É—á–∞—Ç –æ—à–∏–±–∫–∏!")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(config.TELEGRAM_BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", CalorieBotHandlers.start_command))
    application.add_handler(CommandHandler("help", CalorieBotHandlers.help_command))
    application.add_handler(CommandHandler("stats", CalorieBotHandlers.stats_handler))
    application.add_handler(CommandHandler("settings", CalorieBotHandlers.settings_handler))
    application.add_handler(CommandHandler("profile", CalorieBotHandlers.profile_command))
    application.add_handler(CommandHandler("status", CalorieBotHandlers.status_command))
    application.add_handler(CommandHandler("fixgoal", CalorieBotHandlers.fix_goal_command))
    application.add_handler(CommandHandler("testai", CalorieBotHandlers.test_ai_command))
    application.add_handler(CommandHandler("debuguser", CalorieBotHandlers.debug_user_command))
    application.add_handler(CommandHandler("resetuser", CalorieBotHandlers.reset_user_command))
    application.add_handler(CommandHandler("debugstats", CalorieBotHandlers.debug_stats_command))
    application.add_handler(CommandHandler("rebuildstats", CalorieBotHandlers.rebuild_stats_command))
    
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("adminstats", CalorieBotHandlers.admin_stats_command))
    application.add_handler(CommandHandler("adminusers", CalorieBotHandlers.admin_users_command))
    application.add_handler(CommandHandler("adminuser", CalorieBotHandlers.admin_user_command))
    application.add_handler(CommandHandler("adminexport", CalorieBotHandlers.admin_export_command))
    application.add_handler(CommandHandler("admintest", CalorieBotHandlers.admin_test_command))
    application.add_handler(CommandHandler("forcemigration", CalorieBotHandlers.force_migration_command))
    application.add_handler(CommandHandler("debugmigration", CalorieBotHandlers.debug_migration_command))
    application.add_handler(CommandHandler("admindebug", CalorieBotHandlers.admin_debug_command))
    application.add_handler(CommandHandler("admindb", CalorieBotHandlers.admin_db_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.PHOTO, CalorieBotHandlers.photo_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, CalorieBotHandlers.text_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(CalorieBotHandlers.button_handler))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    scheduler = WeeklyStatsScheduler(application)
    scheduler.schedule_weekly_stats()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º {config.BOT_NAME}...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
